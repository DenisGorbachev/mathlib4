import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Limits

universe v‚ÇÇ v‚ÇÅ v u‚ÇÉ u‚ÇÇ u‚ÇÅ u

namespace PresheafOfModules

open CategoryTheory Category Limits

-- let us not care too much about universes so far...

instance {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [Ring R] [Ring S] (f : R ‚Üí+* S) :
  PreservesLimitsOfSize (ModuleCat.restrictScalars f) := sorry

instance {R : Type u‚ÇÅ} [Ring R] : HasLimitsOfSize (ModuleCat.{v} R) := sorry

section

variable {R : Type u‚ÇÅ} {S : Type u‚ÇÉ} [Ring R] [Ring S] (f : R ‚Üí+* S)
  {J : Type u‚ÇÇ} [Category.{v‚ÇÇ} J] (F : J ‚•§ ModuleCat.{v} S)

-- (if we do not have it already!) this should be generalized to any functor...
-- definition of the canonical map `G (limit F) ‚ü∂ limit (F ‚ãô G)` [first for any limit cone,
-- and then for the actual limit], then it is iso if `PreservesLimit...`
-- presumably, the various `Comparison` isos for the various shapes should be refactored to use this only...
noncomputable def restrictScalarsLimitIso :
    (ModuleCat.restrictScalars f).obj (limit F) ‚âÖ limit (F ‚ãô ModuleCat.restrictScalars f) :=
  IsLimit.conePointUniqueUpToIso
    (isLimitOfPreserves (ModuleCat.restrictScalars f) (limit.isLimit F))
      (limit.isLimit (F ‚ãô ModuleCat.restrictScalars f))

@[reassoc (attr := simp)]
lemma restrictScalarsLimitIso_hom_œÄ (j : J) :
    (restrictScalarsLimitIso f F).hom ‚â´ limit.œÄ (F ‚ãô ModuleCat.restrictScalars f) j =
      (ModuleCat.restrictScalars f).map (limit.œÄ F j) := by
  dsimp only [restrictScalarsLimitIso]
  simp

@[reassoc (attr := simp)]
lemma restrictScalarsLimitIso_inv_map_œÄ  (j : J) :
    (restrictScalarsLimitIso f F).inv ‚â´ (ModuleCat.restrictScalars f).map (limit.œÄ F j) =
      limit.œÄ (F ‚ãô ModuleCat.restrictScalars f) j := by
  rw [‚Üê restrictScalarsLimitIso_hom_œÄ, Iso.inv_hom_id_assoc]
end

noncomputable example (R : Type u) [Ring R] :
  PreservesLimits (forget‚ÇÇ (ModuleCat.{v} R) AddCommGroupCat.{v}) :=
    @ModuleCat.forget‚ÇÇAddCommGroupPreservesLimits R _

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {R : C·µí·µñ ‚•§ RingCat.{u}}
  {J : Type u‚ÇÇ} [Category.{v‚ÇÇ} J] (F : J ‚•§ PresheafOfModules.{v} R)

def evaluationJointlyReflectsLimits (c : Cone F)
    (hc : ‚àÄ (X : C·µí·µñ), IsLimit ((evaluation.{v} R X).mapCone c)) : IsLimit c where
  lift s := Hom.mk'' (fun X => (hc X).lift ((evaluation.{v} R X).mapCone s)) (fun X Y f => by
    apply (isLimitOfPreserves (ModuleCat.restrictScalars (R.map f)) (hc Y)).hom_ext
    intro j
    simp only [Functor.mapCone_œÄ_app, Category.assoc, ‚Üê Functor.map_comp]
    erw [IsLimit.fac, ‚Üê NatTrans.naturality, ‚Üê NatTrans.naturality, IsLimit.fac_assoc]
    rfl)
  fac s j := by
    ext1 X
    exact (hc X).fac ((evaluation.{v} R X).mapCone s) j
  uniq s m hm := by
    ext1 X
    exact (hc X).uniq ((evaluation.{v} R X).mapCone s) ((evaluation.{v} R X).map m) (fun j => by
      dsimp
      rw [‚Üê hm]
      rfl)

section

@[simps]
noncomputable def limitBundledMkStruct : BundledMkStruct R where
  obj X := limit (F ‚ãô evaluation R X)
  map {X Y} f := limMap (whiskerLeft F (restriction R f)) ‚â´ (restrictScalarsLimitIso (R.map f) (F ‚ãô evaluation R Y)).inv
  map_id := fun X => by
    dsimp
    simp only [‚Üê cancel_mono (restrictScalarsLimitIso (R.map (ùüô X)) (F ‚ãô evaluation R X)).hom,
      assoc, Iso.inv_hom_id, comp_id]
    apply limit.hom_ext
    intro j
    simp only [Functor.comp_obj, evaluation_obj, limMap_œÄ, whiskerLeft_app, assoc]
    erw [restrictScalarsLimitIso_hom_œÄ, restriction_app_id]
    ext x
    dsimp
    rw [ModuleCat.restrictScalarsId'_inv_apply, ModuleCat.restrictScalarsId'_inv_apply]
  map_comp {X Y Z} f g := by
    dsimp
    simp only [‚Üê cancel_mono (restrictScalarsLimitIso (R.map (f ‚â´ g)) (F ‚ãô evaluation R Z)).hom,
      assoc, Iso.inv_hom_id, comp_id]
    apply limit.hom_ext
    intro j
    simp only [Functor.comp_obj, evaluation_obj, limMap_œÄ, whiskerLeft_app, Functor.map_comp, assoc]
    erw [restrictScalarsLimitIso_hom_œÄ]
    sorry

noncomputable def limitCone : Cone F where
  pt := mk'' (limitBundledMkStruct F)
  œÄ :=
    { app := fun j => Hom.mk'' (fun X => limit.œÄ (F ‚ãô evaluation R X) j) (fun X Y f => by
        dsimp
        simp only [Category.assoc, restrictScalarsLimitIso_inv_map_œÄ]
        apply limMap_œÄ)
      naturality := fun i j œÜ => by
        dsimp
        erw [id_comp]
        ext1 X
        simp only [mk''_obj, limitBundledMkStruct_obj, Hom.mk''_app, Hom.comp_app]
        exact (limit.w (F ‚ãô evaluation R X) œÜ).symm }

noncomputable def isLimitLimitCone : IsLimit (limitCone F) :=
  evaluationJointlyReflectsLimits _ _ (fun _ => limit.isLimit _)

instance : HasLimitsOfShape J (PresheafOfModules.{v} R) where
  has_limit F := ‚ü®_, isLimitLimitCone F‚ü©

end

end PresheafOfModules
