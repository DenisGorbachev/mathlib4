import Mathlib.Algebra.Category.ModuleCat.Presheaf
import Mathlib.Algebra.Category.ModuleCat.Limits
import Mathlib.CategoryTheory.Limits.Preserves.Limits

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v u‚ÇÅ u‚ÇÇ u‚ÇÉ u

namespace PresheafOfModules

open CategoryTheory Category Limits

-- let us not care too much about universes for now...

instance {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [Ring R] [Ring S] (f : R ‚Üí+* S) :
  PreservesLimitsOfSize (ModuleCat.restrictScalars f) := sorry

instance {R : Type u‚ÇÅ} [Ring R] : HasLimitsOfSize (ModuleCat.{v} R) := sorry

noncomputable example (R : Type u) [Ring R] :
  PreservesLimits (forget‚ÇÇ (ModuleCat.{v} R) AddCommGroupCat.{v}) :=
    @ModuleCat.forget‚ÇÇAddCommGroupPreservesLimits R _

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {R : C·µí·µñ ‚•§ RingCat.{u}}
  {J : Type u‚ÇÇ} [Category.{v‚ÇÇ} J] (F : J ‚•§ PresheafOfModules.{v} R)

def evaluationJointlyReflectsLimits (c : Cone F)
    (hc : ‚àÄ (X : C·µí·µñ), IsLimit ((evaluation.{v} R X).mapCone c)) : IsLimit c where
  lift s := Hom.mk'' (fun X => (hc X).lift ((evaluation.{v} R X).mapCone s)) (fun X Y f => by
    apply (isLimitOfPreserves (ModuleCat.restrictScalars (R.map f)) (hc Y)).hom_ext
    intro j
    simp only [Functor.mapCone_œÄ_app, Category.assoc, ‚Üê Functor.map_comp]
    erw [IsLimit.fac, ‚Üê NatTrans.naturality, ‚Üê NatTrans.naturality, IsLimit.fac_assoc]
    rfl)
  fac s j := by
    ext1 X
    exact (hc X).fac ((evaluation.{v} R X).mapCone s) j
  uniq s m hm := by
    ext1 X
    exact (hc X).uniq ((evaluation.{v} R X).mapCone s) ((evaluation.{v} R X).map m) (fun j => by
      dsimp
      rw [‚Üê hm]
      rfl)

section

@[simps]

noncomputable def limitBundledMkStruct : BundledMkStruct R where
  obj X := limit (F ‚ãô evaluation R X)
  map {X Y} f := limMap (whiskerLeft F (restriction R f)) ‚â´ (preservesLimitIso ((ModuleCat.restrictScalars (R.map f))) (F ‚ãô evaluation R Y)).inv
  map_id := fun X => by
    dsimp
    simp only [‚Üê cancel_mono (preservesLimitIso ((ModuleCat.restrictScalars (R.map (ùüô X)))) (F ‚ãô evaluation R X)).hom]
    simp only [assoc, Iso.inv_hom_id, comp_id]
    apply limit.hom_ext
    intro j
    erw [limMap_œÄ, assoc, preservesLimitsIso_hom_œÄ]
    simp only [‚Üê cancel_mono ((ModuleCat.restrictScalarsId' (R.map (ùüô X)) (R.map_id X)).hom.app ((F.obj j).obj X)),
      Functor.comp_obj, evaluation_obj, whiskerLeft_app, restriction_app_id,
      Functor.id_obj, assoc, Iso.inv_hom_id_app, comp_id, NatTrans.naturality,
      Functor.id_map, Iso.inv_hom_id_app_assoc]
  map_comp {X Y Z} f g := by
    dsimp
    simp only [‚Üê cancel_mono (preservesLimitIso ((ModuleCat.restrictScalars (R.map (f ‚â´ g)))) (F ‚ãô evaluation R Z)).hom,
      assoc, Iso.inv_hom_id, comp_id]
    apply limit.hom_ext
    intro j
    simp only [limMap_œÄ, Functor.comp_obj, evaluation_obj, whiskerLeft_app,
      Functor.map_comp, assoc, restriction_app_comp]
    erw [preservesLimitsIso_hom_œÄ, ‚Üê NatTrans.naturality]
    dsimp
    simp only [‚Üê Functor.map_comp_assoc]
    erw [preservesLimitsIso_inv_œÄ, limMap_œÄ, Functor.map_comp_assoc,
      preservesLimitsIso_inv_œÄ_assoc, limMap_œÄ_assoc]
    rfl

noncomputable def limitCone : Cone F where
  pt := mk'' (limitBundledMkStruct F)
  œÄ :=
    { app := fun j => Hom.mk'' (fun X => limit.œÄ (F ‚ãô evaluation R X) j) (fun X Y f => by
        dsimp
        simp only [assoc, preservesLimitsIso_inv_œÄ]
        apply limMap_œÄ)
      naturality := fun i j œÜ => by
        dsimp
        erw [id_comp]
        ext1 X
        simp only [mk''_obj, limitBundledMkStruct_obj, Hom.mk''_app, Hom.comp_app]
        exact (limit.w (F ‚ãô evaluation R X) œÜ).symm }

noncomputable def isLimitLimitCone : IsLimit (limitCone F) :=
  evaluationJointlyReflectsLimits _ _ (fun _ => limit.isLimit _)

instance : HasLimitsOfShape J (PresheafOfModules.{v} R) where
  has_limit F := ‚ü®_, isLimitLimitCone F‚ü©

noncomputable instance (X : C·µí·µñ) : PreservesLimitsOfShape J (evaluation R X) where
  preservesLimit :=
    preservesLimitOfPreservesLimitCone (isLimitLimitCone _) (limit.isLimit _)

#exit

end

end PresheafOfModules
