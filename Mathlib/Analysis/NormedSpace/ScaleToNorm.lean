/-
Copyright (c) 2023 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.Analysis.NormedSpace.Ray

/-!
# Scale a vector to a given norm

For a nonnegative real number `r` and a vector `x` in a real (semi)normed space, we define
`scaleToNorm r x` to be the vector `(r / ‚Äñx‚Äñ) ‚Ä¢ x`.

If `‚Äñx‚Äñ ‚â† 0`, then this vector has norm `r` and belongs to the same ray as `x`.
If `‚Äñx‚Äñ = 0`, then this is the zero vector.

## Implementation notes

Since most facts are true only for nonnegative `r`, we choose to require this argument to be a
bundled nonnegative real number `NNReal` a.k.a. `‚Ñù‚â•0`.
-/

open Set Function Metric Topology NNReal Filter

variable
  {E : Type _} [SeminormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {F : Type _} [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  {r : ‚Ñù‚â•0}

/-- Scale a vector to a prescribed norm.

If `‚Äñx‚Äñ ‚â† 0`, then this vector has norm `r` and belongs to the same ray as `x`.
If `‚Äñx‚Äñ = 0`, then this is the zero vector. -/
noncomputable def scaleToNorm (r : ‚Ñù‚â•0) (x : E) : E := (‚Üër / ‚Äñx‚Äñ) ‚Ä¢ x

/-!
### `scaleToNorm` and zeros
-/

lemma scaleToNorm_zero_left_apply (x : E) : scaleToNorm 0 x = 0 := by
  simp [scaleToNorm]

@[simp] lemma scaleToNorm_zero_left : (scaleToNorm 0 : E ‚Üí E) = 0 :=
  funext scaleToNorm_zero_left_apply

lemma scaleToNorm_of_norm_zero (r : ‚Ñù‚â•0) {x : E} (hx : ‚Äñx‚Äñ = 0) : scaleToNorm r x = 0 := by
  simp [scaleToNorm, hx]

@[simp] lemma scaleToNorm_zero_right (r : ‚Ñù‚â•0) : scaleToNorm r (0 : E) = 0 :=
  scaleToNorm_of_norm_zero r norm_zero

/-!
### Norm of `scaleToNorm r x`

In this section we show that `‚ÄñscaleToNorm r x‚Äñ ‚â§ r` for all `r`, `x` (see `norm_scaleToNorm_le`),
and in most cases this inequality becomes an equality (see `norm_scaleToNorm_eq'` and
`norm_scaleToNorm_eq`).
-/

lemma norm_scaleToNorm_eq' (r : ‚Ñù‚â•0) {x : E} (hx : ‚Äñx‚Äñ ‚â† 0) :
    ‚ÄñscaleToNorm r x‚Äñ = r := by
  rw [scaleToNorm, norm_smul, norm_div, norm_norm, Real.norm_of_nonneg r.coe_nonneg,
    div_mul_cancel _ hx]

lemma norm_scaleToNorm_eq (r : ‚Ñù‚â•0) {x : F} (hx : x ‚â† 0) :
    ‚ÄñscaleToNorm r x‚Äñ = r :=
  norm_scaleToNorm_eq' r (norm_ne_zero_iff.2 hx)

lemma scaleToNorm_mem_sphere' (r : ‚Ñù‚â•0) {x : E} (hx : ‚Äñx‚Äñ ‚â† 0) :
    scaleToNorm r x ‚àà sphere (0 : E) r :=
  mem_sphere_zero_iff_norm.2 <| norm_scaleToNorm_eq' r hx

lemma scaleToNorm_mem_sphere (r : ‚Ñù‚â•0) {x : F} (hx : x ‚â† 0) :
    scaleToNorm r x ‚àà sphere (0 : F) r :=
  mem_sphere_zero_iff_norm.2 <| norm_scaleToNorm_eq r hx

lemma norm_scaleToNorm_le (r : ‚Ñù‚â•0) (x : E) : ‚ÄñscaleToNorm r x‚Äñ ‚â§ r := by
  by_cases h : ‚Äñx‚Äñ = 0
  ¬∑ rw [scaleToNorm_of_norm_zero r h, norm_zero]
    exact r.2
  ¬∑ exact (norm_scaleToNorm_eq' r h).le

/-!
### `scaleToNorm` and `SameRay`

In this section we show that `scaleToNorm r x` and `x` belong to the same ray.

TODO: prove `SameRay ‚Ñù x y ‚Üí SameRay ‚Ñù (scaleToNorm r x) y`. What are the right `‚â† 0` assumptions?
-/

lemma SameRay.scaleToNorm_self (r : ‚Ñù‚â•0) (x : E) : SameRay ‚Ñù (scaleToNorm r x) x :=
  sameRay_nonneg_smul_left _ (by positivity)

lemma SameRay.self_scaleToNorm (r : ‚Ñù‚â•0) (x : E) : SameRay ‚Ñù x (scaleToNorm r x) :=
  .symm <| .scaleToNorm_self _ _

/-!
### Fixed points and composition of `scaleToNorm`s
-/

lemma scaleToNorm_eq_self' (hr : r ‚â† 0) {x : E} (hx : ‚Äñx‚Äñ = r) :
    scaleToNorm r x = x := by
  rw [scaleToNorm, hx, div_self (NNReal.coe_ne_zero.2 hr), one_smul]

lemma scaleToNorm_eq_self (r : ‚Ñù‚â•0) {x : F} (hx : ‚Äñx‚Äñ = r) :
    scaleToNorm r x = x := by
  rcases eq_or_ne r 0 with (rfl | hr)
  ¬∑ simp_all
  ¬∑ exact scaleToNorm_eq_self' hr hx

lemma scaleToNorm_smul (r : ‚Ñù‚â•0) {c : ‚Ñù} (hc : 0 < c) (x : E) :
    scaleToNorm r (c ‚Ä¢ x) = scaleToNorm r x := by
  rw [scaleToNorm, scaleToNorm, norm_smul, smul_smul, div_mul, Real.norm_eq_abs,
    abs_of_pos hc, mul_div_cancel_left _ hc.ne']

lemma scaleToNorm_scaleToNorm (r‚ÇÅ : ‚Ñù‚â•0) {r‚ÇÇ : ‚Ñù‚â•0} (hr‚ÇÇ : r‚ÇÇ ‚â† 0) (x : E) :
    scaleToNorm r‚ÇÅ (scaleToNorm r‚ÇÇ x) = scaleToNorm r‚ÇÅ x := by
  cases' (norm_nonneg x).eq_or_gt with hx hx
  ¬∑ simp [scaleToNorm, hx] 
  ¬∑ apply scaleToNorm_smul
    exact div_pos (NNReal.coe_pos.2 hr‚ÇÇ.bot_lt) hx

/-!
### Image and range

In this section we show that `scaleToNorm r` sends `{0}·∂ú` to the sphere of radius `r` and the whole
space to the union of this sphere and the origin. The results are formulated using `Set.image` and
`Set.range`.
-/

lemma image_scaleToNorm_norm_ne_zero (hr : r ‚â† 0) :
    scaleToNorm r '' {x : E | ‚Äñx‚Äñ ‚â† 0} = sphere 0 r := by
  apply Subset.antisymm
  ¬∑ exact image_subset_iff.2 (fun x ‚Ü¶ scaleToNorm_mem_sphere' r)
  ¬∑ refine fun x hx ‚Ü¶ ‚ü®x, ?_, scaleToNorm_eq_self' hr (mem_sphere_zero_iff_norm.1 hx)‚ü©
    simp [mem_sphere_zero_iff_norm.1 hx, hr]

lemma image_scaleToNorm_compl_zero' (hr : r ‚â† 0) :
    scaleToNorm r '' ({0}·∂ú : Set F) = sphere 0 r := by
  simp [‚Üê image_scaleToNorm_norm_ne_zero hr, Set.compl_def]

lemma image_scaleToNorm_compl_zero [Nontrivial F] (r : ‚Ñù‚â•0) :
    scaleToNorm r '' ({0}·∂ú : Set F) = sphere 0 r := by
  rcases eq_or_ne r 0 with rfl | hr
  ¬∑ have : Set.Nonempty ({0}·∂ú : Set F) := exists_ne _
    simp [this]
  ¬∑ exact image_scaleToNorm_compl_zero' hr

lemma range_scaleToNorm' (hr : r ‚â† 0) :
    range (scaleToNorm r) = insert 0 (sphere (0 : E) r) := by
  refine (range_subset_iff.2 <| fun x ‚Ü¶ ?_).antisymm (insert_subset.2 ‚ü®?_, fun x hx ‚Ü¶ ?_‚ü©)
  ¬∑ cases' eq_or_ne (‚Äñx‚Äñ) 0 with hx hx
    ¬∑ rw [scaleToNorm_of_norm_zero _ hx]
      exact mem_insert _ _
    ¬∑ simp only [‚Üê image_scaleToNorm_norm_ne_zero hr]
      exact mem_insert_of_mem _ (mem_image_of_mem _ hx)
  ¬∑ exact ‚ü®0, scaleToNorm_zero_right _‚ü©
  ¬∑ exact ‚ü®x, scaleToNorm_eq_self' hr (mem_sphere_zero_iff_norm.1 hx)‚ü©

lemma range_scaleToNorm (r : ‚Ñù‚â•0) :
    range (scaleToNorm r) = insert 0 (sphere (0 : F) r) := by
  rcases eq_or_ne r 0 with rfl | hr
  ¬∑ simp [Pi.zero_def]
  ¬∑ exact range_scaleToNorm' hr

/-!
### Continuity of `scaleToNorm`

In this section we show that `scaleToNorm r x` is continuous in `r` everywhere and is continuous in
`x` away from zero. We also prove that `scaleToNorm (f a) (g a)` is continuous everywhere provided
that both `f` and `g` are continuous and `g a = 0` implies `f a = 0` for all `a`.
-/

lemma continuous_scaleToNorm_left (x : E) : Continuous (fun r ‚Ü¶ scaleToNorm r x) :=
  (continuous_subtype_val.div_const _).smul continuous_const

lemma continuousOn_scaleToNorm‚ÇÇ' :
    ContinuousOn (fun p : ‚Ñù‚â•0 √ó E ‚Ü¶ scaleToNorm p.1 p.2) { p | ‚Äñp.2‚Äñ ‚â† 0 } :=
  ((continuous_subtype_val.comp_continuousOn continuousOn_fst).div
    continuousOn_snd.norm <| fun _ ‚Ü¶ id).smul continuousOn_snd

lemma continuousOn_scaleToNorm‚ÇÇ :
    ContinuousOn (fun p : ‚Ñù‚â•0 √ó F ‚Ü¶ scaleToNorm p.1 p.2) { p | p.2 ‚â† 0 } := by
  convert ‚Üê continuousOn_scaleToNorm‚ÇÇ' (E := F)
  exact norm_eq_zero

lemma continuousOn_scaleToNorm_right' (r : ‚Ñù‚â•0) :
    ContinuousOn (scaleToNorm r) {x : E | ‚Äñx‚Äñ ‚â† 0} :=
  continuousOn_scaleToNorm‚ÇÇ'.comp (continuousOn_const.prod continuousOn_id) fun _ ‚Ü¶ id

lemma continuousOn_scaleToNorm_right (r : ‚Ñù‚â•0) :
    ContinuousOn (scaleToNorm r) ({0}·∂ú : Set F) :=
  continuousOn_scaleToNorm‚ÇÇ.comp (continuousOn_const.prod continuousOn_id) fun _ ‚Ü¶ id

variable {Œ± X : Type _} [TopologicalSpace X]

protected lemma Filter.Tendsto.scaleToNorm' {l : Filter Œ±} {f : Œ± ‚Üí ‚Ñù‚â•0} {r : ‚Ñù‚â•0}
    (hf : Tendsto f l (ùìù r)) {g : Œ± ‚Üí E} {x : E} (hg : Tendsto g l (ùìù x)) (h‚ÇÄ : ‚Äñx‚Äñ = 0 ‚Üí r = 0) :
    Tendsto (fun a ‚Ü¶ scaleToNorm (f a) (g a)) l (ùìù (scaleToNorm r x)) := by
  cases eq_or_ne (‚Äñx‚Äñ) 0 with
  | inl hx =>
    obtain rfl := h‚ÇÄ hx
    rw [scaleToNorm_of_norm_zero _ hx]
    exact squeeze_zero_norm (fun _ ‚Ü¶ norm_scaleToNorm_le _ _) (NNReal.tendsto_coe.2 hf)
  | inr hx =>
    refine (continuousOn_scaleToNorm‚ÇÇ' (r, x) hx).tendsto.comp <|
      tendsto_nhdsWithin_iff.2 ‚ü®hf.prod_mk_nhds hg, ?_‚ü©
    exact hg.norm.eventually (isOpen_ne.mem_nhds hx)

protected lemma Filter.Tendsto.scaleToNorm {l : Filter Œ±} {f : Œ± ‚Üí ‚Ñù‚â•0} {r : ‚Ñù‚â•0}
    (hf : Tendsto f l (ùìù r)) {g : Œ± ‚Üí F} {x : F} (hg : Tendsto g l (ùìù x)) (h‚ÇÄ : x = 0 ‚Üí r = 0) :
    Tendsto (fun a ‚Ü¶ scaleToNorm (f a) (g a)) l (ùìù (scaleToNorm r x)) :=
  hf.scaleToNorm' hg <| by simpa only [norm_eq_zero] using h‚ÇÄ

protected lemma Continuous.scaleToNorm' {f : X ‚Üí ‚Ñù‚â•0} {g : X ‚Üí E} (hf : Continuous f)
    (hg : Continuous g) (h‚ÇÄ : ‚àÄ x, ‚Äñg x‚Äñ = 0 ‚Üí f x = 0) :
    Continuous fun x ‚Ü¶ scaleToNorm (f x) (g x) :=
  continuous_iff_continuousAt.2 fun _ ‚Ü¶ hf.continuousAt.scaleToNorm' hg.continuousAt (h‚ÇÄ _)

protected lemma Continuous.scaleToNorm {f : X ‚Üí ‚Ñù‚â•0} {g : X ‚Üí F} (hf : Continuous f)
    (hg : Continuous g) (h‚ÇÄ : ‚àÄ x, g x = 0 ‚Üí f x = 0) :
    Continuous fun x ‚Ü¶ scaleToNorm (f x) (g x) :=
  continuous_iff_continuousAt.2 fun _ ‚Ü¶ hf.continuousAt.scaleToNorm hg.continuousAt (h‚ÇÄ _)
