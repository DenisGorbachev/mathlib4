/-
Copyright (c) 2023 Moritz Doll. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Moritz Doll, S√©bastien Gou√´zel, Jireh Loreaux
-/
import Mathlib.Analysis.MeanInequalities
import Mathlib.Data.Fintype.Order
import Mathlib.LinearAlgebra.Matrix.Basis

local macro_rules | `($x ^ $y)   => `(HPow.hPow $x $y) -- Porting note: See issue #2220

open Real Set Filter IsROrC Bornology BigOperators Uniformity Topology NNReal ENNReal

noncomputable section

/-- A copy of a Prod type, on which we will put the `L^p` distance. Since the Prod type itself is
already endowed with the `L^‚àû` distance, we need the type synonym to avoid confusing typeclass
resolution. Also, we let it depend on `p`, to get a whole family of type on which we can put
different distances. -/
@[nolint unusedArguments]
def ProdLp (_p : ‚Ñù‚â•0‚àû) (Œ± Œ≤ : Type _) : Type _ :=
  Œ± √ó Œ≤

instance (p : ‚Ñù‚â•0‚àû) (Œ± Œ≤ : Type _) [Inhabited Œ±] [Inhabited Œ≤] : Inhabited (ProdLp p Œ± Œ≤) :=
  ‚ü®default, default‚ü©

@[ext]
protected theorem ProdLp.ext {p : ‚Ñù‚â•0‚àû} {Œ± Œ≤ : Type _} {x y : ProdLp p Œ± Œ≤}
    (h1 : x.fst = y.fst) (h2 : x.snd = y.snd) : x = y := Prod.ext h1 h2

namespace ProdLp

variable (p : ‚Ñù‚â•0‚àû) (ùïú ùïú' : Type _) (Œ± Œ≤ : Type _)

/-- Canonical bijection between `PiLp p Œ±` and the original Pi type. We introduce it to be able
to compare the `L^p` and `L^‚àû` distances through it. -/
protected def equiv : ProdLp p Œ± Œ≤ ‚âÉ Œ± √ó Œ≤ :=
  Equiv.refl _

/-! Note that the unapplied versions of these lemmas are deliberately omitted, as they break
the use of the type synonym. -/

@[simp]
theorem equiv_apply (x : ProdLp p Œ± Œ≤) : ProdLp.equiv p Œ± Œ≤ x = x :=
  rfl

@[simp]
theorem equiv_symm_apply (x : Œ± √ó Œ≤) : (ProdLp.equiv p Œ± Œ≤).symm x = x :=
  rfl

section DistNorm

variable [Fintype Œπ]

/-!
### Definition of `edist`, `dist` and `norm` on `PiLp`

In this section we define the `edist`, `dist` and `norm` functions on `PiLp p Œ±` without assuming
`[Fact (1 ‚â§ p)]` or metric properties of the spaces `Œ± i`. This allows us to provide the rewrite
lemmas for each of three cases `p = 0`, `p = ‚àû` and `0 < p.to_real`.
-/


section Edist

variable [EDist Œ±] [EDist Œ≤]

/-- Endowing the space `ProdLp p Œ± Œ≤` with the `L^p` edistance. We register this instance
separate from `ProdLp.instPseudoEMetric` since the latter requires the type class hypothesis
`[Fact (1 ‚â§ p)]` in order to prove the triangle inequality.

Registering this separately allows for a future emetric-like structure on `ProdLp p Œ± Œ≤` for `p < 1`
satisfying a relaxed triangle inequality. The terminology for this varies throughout the
literature, but it is sometimes called a *quasi-metric* or *semi-metric*. -/
instance : EDist (ProdLp p Œ± Œ≤) where
  edist f g :=
    -- Porting note: can we drop the `_hp` entirely?
    if _hp : p = 0 then 0
    else
      if p = ‚àû then edist f.fst g.fst ‚äî edist f.snd g.snd
      else (edist f.fst g.fst ^ p.toReal + edist f.snd g.snd ^ p.toReal) ^ (1 / p.toReal)

variable {Œ± Œ≤}

variable (x y : ProdLp p Œ± Œ≤) (x' : Œ± √ó Œ≤)

theorem edist_eq_card (f g : ProdLp 0 Œ± Œ≤) : edist f g = 0 :=
  if_pos rfl

theorem edist_eq_add {p : ‚Ñù‚â•0‚àû} (hp : 0 < p.toReal) (f g : ProdLp p Œ± Œ≤) :
    edist f g = (edist f.fst g.fst ^ p.toReal + edist f.snd g.snd ^ p.toReal) ^ (1 / p.toReal) :=
  let hp' := ENNReal.toReal_pos_iff.mp hp
  (if_neg hp'.1.ne').trans (if_neg hp'.2.ne)

theorem edist_eq_sup (f g : ProdLp ‚àû Œ± Œ≤) :
    edist f g = edist f.fst g.fst ‚äî edist f.snd g.snd := by
  dsimp [edist]
  exact if_neg ENNReal.top_ne_zero

end Edist

section EdistProp

variable {Œ± Œ≤}
variable [PseudoEMetricSpace Œ±] [PseudoEMetricSpace Œ≤]

/-- This holds independent of `p` and does not require `[Fact (1 ‚â§ p)]`. We keep it separate
from `pi_Lp.pseudo_emetric_space` so it can be used also for `p < 1`. -/
protected theorem edist_self (f : ProdLp p Œ± Œ≤) : edist f f = 0 := by
  rcases p.trichotomy with (rfl | rfl | h)
  ¬∑ simp [edist_eq_card]
  ¬∑ simp [edist_eq_sup]
  ¬∑ simp [edist_eq_add h, ENNReal.zero_rpow_of_pos h, ENNReal.zero_rpow_of_pos (inv_pos.2 <| h)]

/-- This holds independent of `p` and does not require `[Fact (1 ‚â§ p)]`. We keep it separate
from `pi_Lp.pseudo_emetric_space` so it can be used also for `p < 1`. -/
protected theorem edist_comm (f g : ProdLp p Œ± Œ≤) : edist f g = edist g f := by
  rcases p.trichotomy with (rfl | rfl | h)
  ¬∑ simp only [edist_eq_card, eq_comm, Ne.def]
  ¬∑ simp only [edist_eq_sup, edist_comm]
  ¬∑ simp only [edist_eq_add h, edist_comm]

end EdistProp

section Dist

variable [Dist Œ±] [Dist Œ≤]

/-- Endowing the space `PiLp p Œ≤` with the `L^p` distance. We register this instance
separate from `pi_Lp.pseudo_metric` since the latter requires the type class hypothesis
`[Fact (1 ‚â§ p)]` in order to prove the triangle inequality.

Registering this separately allows for a future metric-like structure on `PiLp p Œ≤` for `p < 1`
satisfying a relaxed triangle inequality. The terminology for this varies throughout the
literature, but it is sometimes called a *quasi-metric* or *semi-metric*. -/
instance : Dist (ProdLp p Œ± Œ≤) where
  dist f g :=
    if _hp : p = 0 then 0 --{ i | f i ‚â† g i }.toFinite.toFinset.card
    else
      if p = ‚àû then dist f.fst g.fst ‚äî dist f.snd g.snd
      else (dist f.fst g.fst ^ p.toReal + dist f.snd g.snd ^ p.toReal) ^ (1 / p.toReal)

variable {Œ± Œ≤}

theorem dist_eq_card (f g : ProdLp 0 Œ± Œ≤) : dist f g = 0 :=
  if_pos rfl

theorem dist_eq_add {p : ‚Ñù‚â•0‚àû} (hp : 0 < p.toReal) (f g : ProdLp p Œ± Œ≤) :
    dist f g = (dist f.fst g.fst ^ p.toReal + dist f.snd g.snd ^ p.toReal) ^ (1 / p.toReal) :=
  let hp' := ENNReal.toReal_pos_iff.mp hp
  (if_neg hp'.1.ne').trans (if_neg hp'.2.ne)

theorem dist_eq_sup (f g : ProdLp ‚àû Œ± Œ≤) :
    dist f g = dist f.fst g.fst ‚äî dist f.snd g.snd := by
  dsimp [dist]
  exact if_neg ENNReal.top_ne_zero

end Dist

section Norm

variable [Norm Œ±] [Zero Œ±] [Norm Œ≤] [Zero Œ≤]

/-- Endowing the space `PiLp p Œ≤` with the `L^p` norm. We register this instance
separate from `PiLp.seminormedAddCommGroup` since the latter requires the type class hypothesis
`[Fact (1 ‚â§ p)]` in order to prove the triangle inequality.

Registering this separately allows for a future norm-like structure on `PiLp p Œ≤` for `p < 1`
satisfying a relaxed triangle inequality. These are called *quasi-norms*. -/
instance instNorm : Norm (ProdLp p Œ± Œ≤) where
  norm f :=
    if _hp : p = 0 then 0 -- { i | f i ‚â† 0 }.toFinite.toFinset.card
    else if p = ‚àû then ‚Äñf.fst‚Äñ ‚äî ‚Äñf.snd‚Äñ
    else (‚Äñf.fst‚Äñ ^ p.toReal + ‚Äñf.snd‚Äñ ^ p.toReal) ^ (1 / p.toReal)

variable {p Œ≤}

theorem norm_eq_card (f : ProdLp 0 Œ± Œ≤) : ‚Äñf‚Äñ = 0 :=
  if_pos rfl

theorem norm_eq_sup (f : ProdLp ‚àû Œ± Œ≤) : ‚Äñf‚Äñ = ‚Äñf.fst‚Äñ ‚äî ‚Äñf.snd‚Äñ := by
  dsimp [Norm.norm]
  exact if_neg ENNReal.top_ne_zero

theorem norm_eq_add (hp : 0 < p.toReal) (f : ProdLp p Œ± Œ≤) :
    ‚Äñf‚Äñ = (‚Äñf.fst‚Äñ ^ p.toReal + ‚Äñf.snd‚Äñ ^ p.toReal) ^ (1 / p.toReal) :=
  let hp' := ENNReal.toReal_pos_iff.mp hp
  (if_neg hp'.1.ne').trans (if_neg hp'.2.ne)

end Norm

end DistNorm

/-! ### Instances on finite `L^p` products -/


instance instUniformSpace [UniformSpace Œ±] [UniformSpace Œ≤] : UniformSpace (ProdLp p Œ± Œ≤) :=
  instUniformSpaceProd

theorem uniformContinuous_equiv [UniformSpace Œ±] [UniformSpace Œ≤] :
    UniformContinuous (ProdLp.equiv p Œ± Œ≤) :=
  uniformContinuous_id

theorem uniformContinuous_equiv_symm [UniformSpace Œ±] [UniformSpace Œ≤] :
    UniformContinuous (ProdLp.equiv p Œ± Œ≤).symm :=
  uniformContinuous_id

@[continuity]
theorem continuous_equiv [UniformSpace Œ±] [UniformSpace Œ≤] : Continuous (ProdLp.equiv p Œ± Œ≤) :=
  continuous_id

@[continuity]
theorem continuous_equiv_symm [UniformSpace Œ±] [UniformSpace Œ≤] :
    Continuous (ProdLp.equiv p Œ± Œ≤).symm :=
  continuous_id

instance instBornology [Bornology Œ±] [Bornology Œ≤] : Bornology (ProdLp p Œ± Œ≤) :=
  Prod.instBornology

-- throughout the rest of the file, we assume `1 ‚â§ p`
variable [Fact (1 ‚â§ p)]

/-- pseudoemetric space instance on the product of finitely many pseudoemetric spaces, using the
`L^p` pseudoedistance, and having as uniformity the product uniformity. -/
instance [PseudoEMetricSpace Œ±] [PseudoEMetricSpace Œ≤] : PseudoEMetricSpace (ProdLp p Œ± Œ≤) :=
  (pseudoEmetricAux p Œ± Œ≤).replaceUniformity (aux_uniformity_eq p Œ≤).symm

/-- emetric space instance on the product of finitely many emetric spaces, using the `L^p`
edistance, and having as uniformity the product uniformity. -/
instance [EMetricSpace Œ±] [EMetricSpace Œ≤] : EMetricSpace (ProdLp p Œ± Œ≤) :=
  @EMetricSpace.ofT0PseudoEMetricSpace (ProdLp p Œ± Œ≤) _ Prod.instT0Space

/-- pseudometric space instance on the product of finitely many pseudometric spaces, using the
`L^p` distance, and having as uniformity the product uniformity. -/
instance [‚àÄ i, PseudoMetricSpace (Œ≤ i)] : PseudoMetricSpace (PiLp p Œ≤) :=
  ((pseudoMetricAux p Œ≤).replaceUniformity (aux_uniformity_eq p Œ≤).symm).replaceBornology fun s =>
    Filter.ext_iff.1 (aux_cobounded_eq p Œ≤).symm s·∂ú

/-- metric space instance on the product of finitely many metric spaces, using the `L^p` distance,
and having as uniformity the product uniformity. -/
instance [‚àÄ i, MetricSpace (Œ± i)] : MetricSpace (PiLp p Œ±) :=
  MetricSpace.ofT0PseudoMetricSpace _
