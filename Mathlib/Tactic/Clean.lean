/-
Copyright (c) 2018 Mario Carneiro. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mario Carneiro, Michail Karatarakis
-/

import Lean

/-!
# `clean` tactic

Remove identity functions from a term.
-/

open Lean Meta Elab.Tactic

namespace Lean.Expr

/-- List of names removed by the `clean` tactic.
All of these names must resolve to functions defeq `id`. -/
-- Note: one could also add `Id` or `hidden`. These don't arise from type hints though.
def cleanIdsConsts : List Name :=
  [``id]

/-- Clean an expression by removing `id`s listed in `cleanIds`.
Also  -/
def cleanIds (e : Expr) : Expr :=
  e.replace fun
    | .app (.app (.const n _) _) e' => if n ∈ cleanIdsConsts then some e' else none
    | .app (.lam _ _ (.bvar 0) _) e' => some e'
    | _ => none

end Lean.Expr

namespace Mathlib.Tactic

/--
`clean t` is like `exact t` but removes identity functions from the term `t`.

These are normally automatically generated with terms like `show t, from p`,
which translate to some variant on `@id t p` in order to retain the type.
These are also generated by tactics such as `dsimp` to insert type hints.
-/
-- Note: follows the implementation of `exact`
elab "clean " t:term : tactic => withMainContext do
  closeMainGoalUsing (checkUnassigned := false) fun type => do
    let mvarCounterSaved := (← getMCtx).mvarCounter
    let r := (← elabTermEnsuringType t type).cleanIds
    logUnassignedAndAbort (← filterOldMVars (← getMVars r) mvarCounterSaved)
    return r

end Mathlib.Tactic
