
What happened to my file? /home/lean/.elan/toolchains/leanprover-community--lean---3.50.3/lib/lean/library/lean_core/data/vector.lean

What happened to my file? /home/lean/actions-runner/_work/doc-gen/doc-gen/mathlib/src/category_theory/functor/default.lean
{"mathlib/src/deprecated/submonoid.lean": ["multiples.self_mem", "univ.is_add_submonoid", "add_monoid.closure_subset", "is_add_submonoid.inter", "is_add_submonoid.finset_sum_mem", "is_add_submonoid.multiples_subset", "add_submonoid.is_add_submonoid", "is_add_submonoid.image", "is_add_submonoid.Inter", "range.is_add_submonoid", "add_monoid.subset_closure", "is_add_submonoid_Union_of_directed", "multiples.zero_mem", "multiples.add_mem", "add_monoid.closure_singleton", "add_monoid.image_closure", "add_monoid.mem_closure_union_iff", "multiples", "is_add_submonoid.smul_mem", "add_monoid.exists_list_of_mem_closure", "add_submonoid.of", "add_monoid.closure.is_add_submonoid", "add_monoid.closure_mono", "multiples.is_add_submonoid", "is_add_submonoid.list_sum_mem", "is_add_submonoid.multiset_sum_mem", "is_add_submonoid.preimage"], "mathlib/src/data/subtype.lean": ["subtype.restrict_def", "subtype.exists", "subtype.simps.coe", "subtype.mk_eq_mk", "subtype.ext", "subtype.prop", "subtype.coe_eq_of_eq_mk", "subtype.coind_coe", "subtype.exists'", "subtype.map", "subtype.restrict", "subtype.forall'", "subtype.restrict_injective", "exists_eq_subtype_mk_iff", "subtype.coe_injective", "exists_subtype_mk_eq_iff", "subtype.equiv_iff", "subtype.surjective_restrict", "subtype.map_coe", "subtype.coind", "subtype.val_injective", "subtype.map_comp", "subtype.coind_bijective", "subtype.val_prop", "subtype.coind_injective", "subtype.forall", "subtype.map_id", "subtype.coe_eta", "subtype.coe_mk", "subtype.coe_eq_iff", "subtype.equivalence", "subtype.ext_val", "subtype.heq_iff_coe_heq", "subtype.ext_iff_val", "subtype.map_involutive", "subtype.trans", "subtype.refl", "subtype.coind_surjective", "subtype.map_injective", "subtype.ext_iff", "subtype.restrict_apply", "subtype.val_eq_coe", "subtype.symm", "subtype.coe_prop", "subtype.val_inj", "subtype.coe_inj", "subtype.heq_iff_coe_eq"], "mathlib/src/data/part.lean": ["part.map_dom", "part.map_get"], "mathlib/src/data/quot.lean": ["quotient.map₂", "surjective_quot_mk", "quotient.ind₂'", "quotient.mk'_eq_mk", "quot.map₂_mk", "quotient.lift_comp_mk", "quotient.rec_on_subsingleton'", "trunc.lift", "trunc.induction_on₂", "quotient.lift_on₂'", "quot.factor", "quot.map_right", "trunc.mk", "quotient.hrec_on'", "quotient.lift₂_mk", "quotient.induction_on_pi", "quot.rec_on_subsingleton₂", "quot.lift_on₂", "quot.map", "quotient.map_mk", "quotient.sound'", "quotient.map₂'_mk'", "quotient.out_eq", "quotient.lift_on'", "quotient.choice", "trunc.nonempty", "trunc.exists_rep", "quotient.eq_mk_iff_out", "quotient.lift_on₂'_mk'", "trunc.lift_on", "quotient.exact'", "quotient.lift_on'_mk'", "quot.map₂", "quotient.map", "quotient.hrec_on₂", "quotient.mk_eq_iff_out", "trunc.bind", "trunc.out", "quotient.out_inj", "quotient.mk_out'", "quot.out_eq", "quotient.rec_on_subsingleton₂'", "true_equivalence", "quot.lift_mk", "trunc.out_eq", "quotient.out", "surjective_quotient_mk", "trunc.eq", "quot.lift₂_mk", "quotient.map'_mk'", "quotient.out_equiv_out", "quot.induction_on₂", "trunc.rec_on_subsingleton", "quotient.out'", "quot.factor_mk_eq", "nonempty_quotient_iff", "trunc.ind", "quotient.map₂_mk", "trunc", "quot.out", "quotient.lift_mk", "quotient.out_eq'", "quotient.ind'", "quot.hrec_on₂", "quotient.map'_mk", "quotient.mk_out", "forall_quotient_iff", "setoid.ext", "quotient.choice_eq", "trunc.lift_mk", "quot.eq", "quotient.map'", "quotient.hrec_on₂'", "quot.lift₂", "quot.induction_on₃", "trunc.rec_on", "trunc.rec", "quotient.map₂'", "quotient.out_injective", "trunc.map", "trunc.induction_on"], "mathlib/src/data/two_pointing.lean": ["two_pointing.ext_iff", "two_pointing.ext", "two_pointing.swap_to_prod"], "mathlib/src/data/opposite.lean": ["opposite.unop_eq_iff_eq_op", "opposite.op_inj_iff", "opposite.op_injective", "opposite.op_unop", "opposite.unop_op", "opposite.unop_inj_iff", "opposite.rec", "opposite.op_eq_iff_eq_unop", "opposite.equiv_to_opposite", "opposite.unop", "opposite.op"], "mathlib/src/data/finite/defs.lean": ["finite.of_not_infinite", "finite.not_infinite"], "mathlib/src/data/option/defs.lean": ["option.mem_iff", "option.maybe", "option.mem_def", "option.pmap", "option.iget", "option.traverse", "option.guard", "option.is_none_iff_eq_none", "option.pbind", "option.rel", "option.join", "option.mem_some_iff", "option.some_inj", "option.to_list", "option.decidable_eq_none", "option.iget_some", "option.filter"], "mathlib/src/data/option/basic.lean": ["option.eq_none_iff_forall_not_mem", "option.choice_eq_none", "option.map_comp_some", "option.get_or_else_none", "option.ne_none_iff_exists", "option.eq_some_iff_get_eq", "option.map_eq_id", "option.exists", "option.pbind_eq_some", "option.eq_of_mem_of_mem", "option.map_pmap", "option.ext", "option.map_some'", "option.pmap_map", "option.bex_ne_none", "option.ne_none_iff_exists'", "option.get_of_mem", "option.map_coe", "option.map_map", "option.guard_eq_some", "option.map_none'", "option.cases_on'_none", "option.map_injective", "option.elim_none_some", "option.map_congr", "option.pmap_none", "option.pmap_some", "option.orelse_eq_some'", "option.map_eq_some'", "option.join_eq_some", "option.cases_on'_some", "option.map_bind", "option.map_eq_none", "option.map_eq_none'", "option.cases_on'_none_coe", "option.choice", "option.none_bind'", "option.join_pmap_eq_pmap_join", "option.pmap_bind", "option.forall", "option.not_mem_none", "option.some_ne_none", "option.exists_mem_map", "option.some_eq_coe", "option.map_comp_map", "option.bind_id_eq_join", "option.get_mem", "option.pmap_eq_some_iff", "option.cases_on'", "option.join_eq_none", "option.ball_ne_none", "option.get_or_else_some", "option.none_bind", "option.bind_comm", "option.orelse_eq_some", "option.comp_map", "option.guard_eq_some'", "option.seq_some", "option.get_or_else_of_ne_none", "option.bind_some", "option.some_injective", "option.orelse_eq_none'", "option.pbind_map", "option.get_or_else_map", "option.to_list_none", "option.bind_pmap", "option.join_map_eq_map_join", "option.map_comm", "option.mem_map_of_mem", "option.map_pbind", "option.map_bind'", "option.some_get", "option.coe_ne_none", "option.map_inj", "option.some_bind'", "option.bind_some'", "option.bind_eq_none", "option.pbind_eq_bind", "option.orelse_eq_none", "option.map_injective'", "option.bind_assoc", "option.pbind_eq_none", "option.bind_eq_bind", "option.pmap_eq_map", "option.iget_mem", "option.map_none", "option.bind_map_comm", "option.mem_of_mem_join", "option.coe_get", "option.choice_eq", "option.mem_map", "option.map_coe'", "option.to_list_some", "option.join_join", "option.some_bind", "option.mem_pmem", "option.map_eq_some", "option.mem_unique", "option.coe_def", "option.bind_eq_some", "option.join_ne_none", "option.forall_mem_map", "option.iget_of_mem", "option.map_some", "option.get_some", "option.join_ne_none'", "option.pmap_eq_none_iff", "option.map_eq_map", "option.bind_eq_some'", "option.bind_eq_none'", "option.cases_on'_coe"], "mathlib/src/data/int/gcd.lean": ["tactic.norm_num.nat_gcd_helper_2", "tactic.norm_num.nat_gcd_helper_1", "tactic.norm_num.nat_coprime_helper_1", "tactic.norm_num.int_gcd_helper'", "tactic.norm_num.nat_coprime_helper_zero_right", "tactic.norm_num.nat_coprime_helper_2", "tactic.norm_num.nat_gcd_helper_dvd_left", "tactic.norm_num.nat_coprime_helper_zero_left", "tactic.norm_num.int_gcd_helper", "tactic.norm_num.int_gcd_helper_neg_right", "tactic.norm_num.int_lcm_helper_neg_right", "tactic.norm_num.int_lcm_helper_neg_left", "tactic.norm_num.nat_not_coprime_helper", "tactic.norm_num.int_gcd_helper_neg_left", "nat.gcd_a_zero_right", "tactic.norm_num.nat_lcm_helper", "tactic.norm_num.int_lcm_helper", "tactic.norm_num.nat_gcd_helper_dvd_right"], "mathlib/src/data/int/basic.lean": ["int.pred_succ", "int.neg_nat_succ", "int.succ_pred", "int.to_nat'", "int.zero_div", "int.mod_add_div_aux", "int.mul_def", "int.nat_succ_eq_int_succ", "int.add_neg_one", "int.succ_neg_nat_succ", "int.neg_succ", "int.pred_nat_succ", "int.succ_neg_succ", "int.pred_neg_pred", "int.pred", "int.coe_pred_of_pos", "int.succ", "int.div_zero", "int.neg_pred", "int.sign_mul", "int.default_eq_zero", "int.coe_nat_nonneg", "int.sign_neg", "int.add_one_le_iff", "int.induction_on", "int.add_def", "int.mul_sign"], "mathlib/src/data/int/absolute_value.lean": ["int.nat_abs_hom_apply"], "mathlib/src/data/int/order/units.lean": ["int.units_pow_two"], "mathlib/src/data/int/order/basic.lean": ["int.induction_on'"], "mathlib/src/data/int/cast/defs.lean": ["int.cast_of_nat"], "mathlib/src/data/list/alist.lean": ["alist.insert_rec", "alist.insert_rec_empty", "alist.recursion_insert_mk", "alist.mk_cons_eq_insert", "alist.insert_of_neg", "alist.insert_rec_insert"], "mathlib/src/data/list/nodup_equiv_fin.lean": ["list.nodup.nth_le_equiv_of_forall_mem_list_apply", "list.nodup.nth_le_equiv_apply_coe", "list.nodup.nth_le_equiv_symm_apply_val", "list.nodup.nth_le_bijection_of_forall_mem_list_coe", "list.nodup.nth_le_equiv_of_forall_mem_list_symm_apply_val"], "mathlib/src/data/list/defs.lean": ["list.replicate", "list.sublists_aux", "list.mmap_with_index_aux", "list.foldl_with_index_aux", "list.foldr_with_index_aux", "list.scanr_aux", "list.sublists_aux₁", "list.of_fn_aux", "list.split_on_p_aux", "list.transpose_aux", "list.sublists'_aux"], "mathlib/src/data/list/nodup.lean": ["list.nodup.attach", "list.nodup.of_attach"], "mathlib/src/data/list/fin_range.lean": ["list.map_nth_le"], "mathlib/src/data/list/infix.lean": ["list.is_infix.reverse", "list.is_prefix.reverse", "list.eq_nil_of_prefix_nil", "list.slice_subset", "list.is_suffix.reverse", "list.mem_of_mem_slice", "list.eq_nil_of_suffix_nil", "list.slice_sublist"], "mathlib/src/data/list/pairwise.lean": ["list.pairwise.pw_filter", "list.pairwise_iff"], "mathlib/src/data/list/lemmas.lean": ["list.foldr_range_eq_of_range_eq", "list.foldl_range_eq_of_range_eq", "list.foldl_range_subset_of_range_subset", "list.foldr_range_subset_of_range_subset"], "mathlib/src/data/list/chain.lean": ["list.chain_iff"], "mathlib/src/data/list/basic.lean": ["list.eq_of_mem_replicate", "list.mem_replicate", "list.length_replicate"], "mathlib/src/data/list/forall2.lean": ["list.forall₂_iff"], "mathlib/src/data/list/sigma.lean": ["list.nodupkeys_of_nodupkeys_cons", "list.not_mem_keys_of_nodupkeys_cons"], "mathlib/src/data/list/rotate.lean": ["list.rotate_eq_self_iff_eq_replicate", "list.head'_rotate", "list.rotate_one_eq_self_iff_eq_replicate", "list.nth_rotate", "list.rotate_replicate"], "mathlib/src/data/list/zip.lean": ["list.length_zip_with", "list.nth_le_zip_with"], "mathlib/src/data/list/perm.lean": ["list.subperm.cons", "list.subperm.of_cons"], "mathlib/src/data/list/of_fn.lean": ["list.array_eq_of_fn", "list.pairwise_of_fn", "list.equiv_sigma_tuple_apply_snd", "list.equiv_sigma_tuple_symm_apply", "list.equiv_sigma_tuple_apply_fst"], "mathlib/src/data/W/basic.lean": ["W_type.equiv_sigma_symm_apply", "W_type.equiv_sigma_apply"], "mathlib/src/data/finsupp/defs.lean": ["finsupp.equiv_fun_on_finite_symm_apply_support", "equiv.finsupp_unique_symm_apply_to_fun", "equiv.finsupp_unique_apply", "finsupp.apply_add_hom_apply", "finsupp.equiv_fun_on_finite_apply", "finsupp.equiv_fun_on_finite_symm_apply_to_fun", "equiv.finsupp_unique_symm_apply_support_val", "finsupp.single_add_hom_apply", "finsupp.coe_fn_add_hom_apply", "finsupp.erase_add_hom_apply", "finsupp.emb_domain.add_monoid_hom_apply"], "mathlib/src/data/set/bool_indicator.lean": ["set.preimage_bool_indicator_tt", "set.preimage_bool_indicator_ff"], "mathlib/src/data/set/image.lean": ["function.surjective.range_eq"], "mathlib/src/data/set/prod.lean": ["set.subsingleton.off_diag_eq_empty", "set.nontrivial.off_diag_nonempty"], "mathlib/src/data/set/function.lean": ["set.eq_on.comp_eq", "function.bijective.restrict_preimage", "set.inj_on.injective", "function.surjective.restrict_preimage", "function.bijective.bij_on_univ", "set.inv_on_empty", "set.restrict_preimage_coe", "strict_mono_on.restrict", "function.injective.restrict_preimage", "set.left_inv_on_empty", "strict_mono.of_restrict", "function.injective.cod_restrict", "set.inv_on_singleton", "set.left_inv_on_singleton", "set.right_inv_on_empty", "set.eq_on_singleton", "set.right_inv_on_singleton", "set.inj_on.ne", "function.injective.inj_on"], "mathlib/src/data/set/basic.lean": ["set.eq_univ_of_univ_subset", "has_lt.lt.ssubset", "set.disjoint_sdiff_left", "set.nonempty.not_disjoint", "set.nonempty.ne_empty", "set.nonempty.empty_ssubset", "set.disjoint_sdiff_right", "disjoint.subset_compl_right", "set.subsingleton.not_nontrivial", "has_subset.subset.disjoint_compl_right", "has_subset.subset.le", "set.nontrivial.coe_sort", "set.nontrivial.not_subsingleton", "has_subset.subset.disjoint_compl_left", "disjoint.subset_compl_left", "set.nonempty.coe_sort", "has_le.le.subset", "has_ssubset.ssubset.lt"], "mathlib/src/data/set/opposite.lean": ["set.mem_unop", "set.singleton_op", "set.op_equiv_self_apply_coe", "set.op_equiv", "set.op_equiv_apply", "set.singleton_unop_op", "set.unop", "set.op", "set.op_unop", "set.unop_mem_unop", "set.unop_op", "set.singleton_unop", "set.singleton_op_unop", "set.mem_op", "set.op_mem_op", "set.op_equiv_self_symm_apply_coe", "set.op_equiv_symm_apply"], "mathlib/src/data/set/intervals/unordered_interval.lean": ["set.uIoc_swap"], "mathlib/src/data/set/pointwise/list_of_fn.lean": ["set.mem_nsmul"], "mathlib/src/data/set/pointwise/basic.lean": ["disjoint.one_not_mem_div_set", "disjoint.zero_not_mem_sub_set"], "mathlib/src/data/fun_like/embedding.lean": ["embedding_like", "embedding_like.injective", "embedding_like.apply_eq_iff_eq", "embedding_like.comp_injective"], "mathlib/src/data/fun_like/basic.lean": ["fun_like", "fun_like.congr", "fun_like.ext_iff", "fun_like.ext'_iff", "fun_like.coe_injective", "fun_like.exists_ne", "fun_like.coe_fn_eq", "fun_like.subsingleton_cod", "fun_like.congr_fun", "fun_like.coe_eq_coe_fn", "fun_like.ext'", "fun_like.ne_iff", "fun_like.ext", "fun_like.congr_arg"], "mathlib/src/data/fun_like/equiv.lean": ["equiv_like.bijective", "equiv_like.comp_bijective", "equiv_like.subsingleton_dom", "equiv_like.comp_surjective", "equiv_like.surjective_comp", "equiv_like.bijective_comp", "equiv_like.injective", "equiv_like.apply_inv_apply", "equiv_like.apply_eq_iff_eq", "equiv_like.surjective", "equiv_like.inv_injective", "equiv_like.comp_injective", "equiv_like.inv_apply_apply", "equiv_like", "equiv_like.injective_comp"], "mathlib/src/data/pnat/basic.lean": ["order_iso.pnat_iso_nat_apply", "equiv.pnat_equiv_nat_symm_apply", "equiv.pnat_equiv_nat_apply"], "mathlib/src/data/real/cau_seq_completion.lean": ["cau_seq.completion.of_rat_ring_hom_apply"], "mathlib/src/data/real/basic.lean": ["real.ring_equiv_Cauchy_apply", "real.ring_equiv_Cauchy_symm_apply_cauchy"], "mathlib/src/data/vector/basic.lean": ["vector.nth_replicate", "vector.replicate", "vector.sum_update_nth'", "vector.sum_update_nth"], "mathlib/src/data/fintype/card.lean": ["equiv.of_right_inverse_of_card_le_apply", "equiv.of_right_inverse_of_card_le_symm_apply", "equiv.of_left_inverse_of_card_le_apply", "equiv.of_left_inverse_of_card_le_symm_apply"], "mathlib/src/data/fintype/basic.lean": ["coe_inv_units_equiv_prod_subtype_symm_apply", "coe_units_equiv_prod_subtype_symm_apply", "units_equiv_prod_subtype_apply_coe", "units_equiv_ne_zero_apply_coe", "units_equiv_ne_zero_symm_apply"], "mathlib/src/data/fin/fin2.lean": ["fin2.remap_left", "fin2.elim0", "fin2.is_lt", "fin2.cases'", "fin2", "fin2.insert_perm", "fin2.of_nat'", "fin2.opt_of_nat", "fin2.add", "fin2.to_nat", "fin2.left"], "mathlib/src/data/fin/basic.lean": ["fin.coe_embedding_apply", "fin.order_iso_subtype_symm_apply", "fin.equiv_subtype_symm_apply", "fin.equiv_subtype_apply", "fin.rev_order_iso_apply", "fin.order_iso_subtype_apply", "fin.of_nat'_eq_coe", "fin.rev_order_iso_to_equiv", "fin.coe_order_embedding_apply"], "mathlib/src/data/pi/algebra.lean": ["unique_of_surjective_one", "pi.const_neg", "pi.vadd_def", "pi.pow_apply", "pi.mul_comp", "pi.const_inv", "pi.smul_const", "function.surjective_pi_map", "pi.div_apply", "pi.add_comp", "pi.sub_def", "pi.inv_def", "function.injective_pi_map", "pi.inv_comp", "pi.const_add", "sum.elim_inv_inv", "pi.const_mul", "function.extend_zero", "pi.bit0_apply", "pi.vadd_const", "pi.div_def", "pi.const_pow", "pi.smul_comp", "pi.vadd_comp", "pi.const_zero", "pi.one_comp", "pi.bit1_apply", "function.extend_sub", "pi.inv_apply", "pi.prod_fst_snd", "unique_of_surjective_zero", "pi.div_comp", "function.extend_one", "pi.prod", "pi.sub_comp", "sum.elim_mul_mul", "sum.elim_neg_neg", "function.extend_mul", "pi.comp_one", "function.extend_inv", "pi.prod_snd_fst", "pi.zero_comp", "pi.smul_apply", "sum.elim_add_add", "pi.zero_apply", "pi.mul_def", "function.bijective_pi_map", "pi.const_div", "pi.pow_def", "pi.add_apply", "function.extend_neg", "sum.elim_div_div", "pi.const_sub", "pi.one_def", "pi.neg_def", "pi.neg_apply", "function.extend_add", "pi.const_one", "function.extend_div", "pi.pow_comp", "pi.vadd_apply", "sum.elim_sub_sub", "pi.sub_apply", "pi.comp_zero", "pi.neg_comp", "pi.mul_apply", "pi.add_def", "pi.zero_def", "pi.one_apply", "sum.elim_one_one", "sum.elim_zero_zero", "pi.smul_def"], "mathlib/src/data/rat/defs.lean": ["rat.mk"], "mathlib/src/data/rat/cast.lean": ["rat.cast_order_embedding_apply"], "mathlib/src/data/rat/floor.lean": ["rat.floor"], "mathlib/src/data/rat/init.lean": ["rat.ext_iff", "rat", "rat.repr", "rat.ext"], "mathlib/src/data/dfinsupp/basic.lean": ["dfinsupp.lift_add_hom_symm_apply", "dfinsupp.filter_linear_map_apply", "dfinsupp.equiv_fun_on_fintype_apply", "dfinsupp.equiv_prod_dfinsupp_symm_apply", "dfinsupp.filter_add_monoid_hom_apply", "dfinsupp.subtype_domain_add_monoid_hom_apply", "dfinsupp.single_add_hom_apply", "dfinsupp.erase_add_hom_apply", "dfinsupp.equiv_prod_dfinsupp_apply", "dfinsupp.lift_add_hom_apply", "dfinsupp.subtype_domain_linear_map_apply", "dfinsupp.map_range.add_monoid_hom_apply", "dfinsupp.map_range.add_equiv_apply", "dfinsupp.equiv_congr_left_apply"], "mathlib/src/data/multiset/basic.lean": ["multiset.to_list_eq_singleton_iff", "multiset.replicate", "multiset.to_list_singleton", "multiset.replicate_add_monoid_hom_apply", "multiset.rel_iff", "multiset.coe_eq_singleton", "multiset.map_embedding_apply"], "mathlib/src/data/finset/n_ary.lean": ["finset.image₂_right_identity", "finset.image₂_left_identity"], "mathlib/src/data/finset/basic.lean": ["finset.erase_cons_of_ne", "finset.to_list_eq_singleton_iff", "finset.sep_def", "finset.to_list_singleton", "finset.val_eq_singleton_iff"], "mathlib/src/data/finset/nat_antidiagonal.lean": ["finset.nat.sigma_antidiagonal_equiv_prod_apply", "finset.nat.sigma_antidiagonal_equiv_prod_symm_apply_fst", "finset.nat.sigma_antidiagonal_equiv_prod_symm_apply_snd_coe"], "mathlib/src/data/prod/basic.lean": ["prod.mk.inj_right", "prod.swap_surjective", "prod.swap_inj", "prod.map_snd", "prod.swap_prod_mk", "prod.lex_iff", "prod.swap_swap", "prod.mk_inj_right", "prod.mk.inj_iff", "prod.mk.inj_left", "prod.lex.refl_right", "prod.lex.refl_left", "prod.forall'", "prod.map_comp_map", "prod.fst_eq_iff", "prod.map_fst", "prod.snd_eq_iff", "prod.swap_bijective", "prod.map_id", "prod.swap", "prod.snd_surjective", "prod.forall", "prod.snd_injective", "prod.mk_inj_left", "prod.map_def", "prod.map_snd'", "prod.snd_comp_mk", "prod.lex.trans", "prod.swap_swap_eq", "prod.id_prod", "prod.exists", "prod.map_mk", "prod.snd_swap", "prod.fst_swap", "prod.fst_surjective", "prod.exists'", "prod.fst_injective", "prod.map_fst'", "prod.fst_comp_mk", "prod.ext_iff", "prod.eq_iff_fst_eq_snd_eq", "prod.map_map", "prod.lex_def", "prod.swap_injective"], "mathlib/src/data/prod/pprod.lean": ["function.injective.pprod_map", "pprod.mk.eta", "pprod.forall", "pprod.forall'", "pprod.exists'", "pprod.exists"], "mathlib/src/data/sym/basic.lean": ["sym.equiv_congr_apply", "sym.equiv_congr_symm_apply", "sym_option_succ_equiv_symm_apply", "sym_option_succ_equiv_apply", "sym.mk_coe"], "mathlib/src/data/sum/basic.lean": ["sum.elim_update_left", "sum.swap_swap", "sum.lex_inl_inl", "sum.update_elim_inl", "sum.swap_right_inverse", "function.surjective.sum_map", "sum.is_right", "sum.update_inl_apply_inr", "sum.elim_lam_const_lam_const", "sum.map", "sum3.in₁", "sum.is_left", "sum.swap", "sum.update_inr_comp_inr", "sum.inl_ne_inr", "sum.lex.mono", "sum.lift_rel.lex", "sum.update_inl_comp_inl", "sum.elim_inr", "sum.elim", "sum.map_inl", "sum.swap_swap_eq", "sum.lex_inr_inr", "sum.update_inl_comp_inr", "sum.map_inr", "sum.map_id_id", "sum.update_inr_apply_inl", "sum.comp_elim", "sum.elim_const_const", "sum.elim_comp_inr", "sum.update_inr_apply_inr", "sum3.in₂", "sum.lift_rel.mono_left", "sum.lift_rel", "sum.lex", "sum.elim_comp_inl_inr", "sum.inr_injective", "sum.lex_acc_inr", "sum.lex_inr_inl", "sum.forall", "sum.update_inl_apply_inl", "sum.get_right", "sum.map_comp_map", "sum.elim_comp_map", "sum.update_elim_inr", "sum.lex_wf", "sum.elim_comp_inl", "sum.elim_update_right", "sum.lex.mono_right", "sum.get_left", "sum.lift_rel.mono", "sum.swap_inr", "sum.lift_rel.mono_right", "sum.swap_inl", "sum.elim_inl_inr", "function.injective.sum_elim", "sum.exists", "sum.swap_left_inverse", "sum.inl_injective", "sum3.in₀", "sum.map_map", "sum.lex.mono_left", "sum.lift_rel.swap", "function.injective.sum_map", "sum.update_inr_comp_inl", "sum.lex_acc_inl", "sum.inr_ne_inl", "sum.elim_inl"], "mathlib/src/data/sum/order.lean": ["order_iso.sum_comm_apply"], "mathlib/src/data/countable/defs.lean": ["exists_surjective_nat", "countable_iff_exists_surjective", "function.surjective.countable", "countable.of_equiv", "function.injective.countable", "equiv.countable_iff"], "mathlib/src/data/nat/with_bot.lean": ["nat.with_bot.add_one_le_of_lt"], "mathlib/src/data/nat/pow.lean": ["nat.pow_two_sub_pow_two"], "mathlib/src/data/nat/basic.lean": ["nat.succ_le_succ_iff", "nat.div_add_mod"], "mathlib/src/data/nat/prime.lean": ["nat.dvd_of_forall_prime_mul_dvd", "prime.nat_prime", "nat.prime.prime"], "mathlib/src/data/nat/sqrt.lean": ["nat.sqrt"], "mathlib/src/data/nat/pairing.lean": ["nat.mkpair_equiv_apply", "nat.mkpair_equiv_symm_apply"], "mathlib/src/data/nat/cast/basic.lean": ["mul_opposite.unop_nat_cast", "pi.nat_apply", "nat.cast_nonneg", "nat.mono_cast", "map_nat_cast'", "nat.one_lt_cast", "nat.cast_max", "nat.cast_comm", "nat.commute_cast", "nat.cast_order_embedding", "ext_nat''", "ext_nat'", "nat.cast_add_monoid_hom", "nat.cast_id", "eq_nat_cast", "nat.cast_tsub", "ext_nat", "nat.cast_mul", "sum.elim_nat_cast_nat_cast", "nat.one_le_cast", "ne_zero.nat_of_injective", "nat.cast_order_embedding_apply", "add_monoid_hom.ext_nat", "has_dvd.dvd.nat_cast", "nat.cast_lt_one", "nat.cast_lt", "nat.cast_add_one_pos", "nat.cast_ring_hom_nat", "mul_opposite.op_nat_cast", "eq_nat_cast'", "nat.cast_ring_hom", "nat.coe_nat_dvd", "nat.cast_min", "nat.cast_le_one", "monoid_with_zero_hom.ext_nat", "nat.cast_pos", "map_nat_cast", "nat.cast_commute", "ne_zero.nat_of_ne_zero", "pi.coe_nat", "nat.abs_cast", "nat.cast_le"], "mathlib/src/data/nat/factorial/basic.lean": ["nat.desc_factorial_of_lt"], "mathlib/src/data/nat/gcd/basic.lean": ["nat.coprime_self", "nat.gcd_dvd_gcd_mul_right", "nat.coprime_mul_iff_right", "nat.coprime.coprime_div_left", "nat.lcm_ne_zero", "nat.coprime_one_right", "nat.coprime.gcd_mul_left_cancel", "nat.gcd_mul_right_right", "nat.coprime.mul_dvd_of_dvd_of_dvd", "nat.dvd_lcm_right", "nat.coprime.pow_right", "nat.gcd_mul_left", "nat.coprime.dvd_of_dvd_mul_left", "nat.gcd_dvd_gcd_of_dvd_right", "nat.lcm_comm", "nat.not_coprime_of_dvd_of_dvd", "nat.lcm_self", "nat.eq_zero_of_gcd_eq_zero_left", "nat.gcd_eq_right", "nat.lcm_one_right", "nat.coprime.gcd_mul_right_cancel_right", "nat.gcd_dvd_right", "nat.gcd_dvd_gcd_mul_left_right", "nat.gcd_pos_of_pos_left", "nat.coprime.gcd_right", "nat.gcd_one_right", "nat.coprime.dvd_of_dvd_mul_right", "nat.exists_coprime'", "nat.gcd_mul_right_left", "nat.coprime.gcd_mul", "nat.exists_coprime", "nat.lcm_assoc", "nat.gcd_dvd_left", "nat.gcd_le_left", "nat.coprime_zero_right", "nat.coprime.mul_right", "nat.gcd_gcd_self_right_right", "nat.gcd_gcd_self_right_left", "nat.gcd_div", "nat.coprime.coprime_mul_right", "nat.coprime.gcd_mul_right_cancel", "nat.dvd_gcd_iff", "nat.gcd_pos_of_pos_right", "nat.lcm_dvd", "nat.gcd_gcd_self_left_left", "nat.gcd_eq_left", "nat.gcd_mul_dvd_mul_gcd", "nat.gcd_eq_right_iff_dvd", "nat.gcd_mul_left_left", "nat.gcd_mul_lcm", "nat.dvd_gcd", "nat.gcd_assoc", "nat.coprime.coprime_mul_left_right", "nat.gcd_dvd_gcd_mul_left", "nat.coprime_one_left", "nat.coprime_div_gcd_div_gcd", "nat.coprime.coprime_mul_left", "nat.gcd_mul_left_right", "nat.coprime.coprime_div_right", "nat.coprime.eq_one_of_dvd", "nat.eq_zero_of_gcd_eq_zero_right", "nat.coprime_comm", "nat.coprime.coprime_mul_right_right", "nat.coprime.coprime_dvd_left", "nat.coprime.mul", "nat.coprime.pow", "nat.gcd_le_right", "nat.dvd_lcm_left", "nat.coprime_zero_left", "nat.gcd_eq_zero_iff", "nat.coprime.gcd_left", "nat.coprime.coprime_dvd_right", "nat.lcm_zero_left", "nat.coprime.pow_left", "nat.coprime.gcd_mul_left_cancel_right", "nat.coprime.symm", "nat.coprime.gcd_eq_one", "nat.gcd_dvd", "nat.lcm_zero_right", "nat.lcm_one_left", "nat.coprime_mul_iff_left", "nat.coprime_iff_gcd_eq_one", "nat.gcd_dvd_gcd_mul_right_right", "nat.gcd_dvd_gcd_of_dvd_left", "nat.gcd_eq_left_iff_dvd", "nat.gcd_mul_right", "nat.coprime.gcd_both", "nat.gcd_comm", "nat.gcd_mul_gcd_of_coprime_of_mul_eq_mul", "nat.gcd_gcd_self_left_right"], "mathlib/src/data/setoid/basic.lean": ["setoid.quotient_ker_equiv_of_right_inverse_apply", "setoid.quotient_ker_equiv_of_right_inverse_symm_apply"], "mathlib/src/data/sigma/basic.lean": ["sigma.ext", "function.surjective.sigma_map", "function.injective.of_sigma_map", "psigma.mk.inj_iff", "sigma.uncurry", "sigma.forall", "sigma.eta", "psigma.map", "sigma.curry_uncurry", "sigma.subtype_ext_iff", "psigma.ext_iff", "psigma.subtype_ext", "sigma.subtype_ext", "sigma.exists", "psigma.elim", "psigma.elim_val", "psigma.subtype_ext_iff", "psigma.forall", "sigma_mk_injective", "function.injective.sigma_map_iff", "psigma.ext", "sigma.curry", "prod.to_sigma", "sigma.uncurry_curry", "function.injective.sigma_map", "sigma.map", "sigma.mk.inj_iff", "sigma.ext_iff", "psigma.exists"], "mathlib/src/data/bool/basic.lean": ["bool.cond_tt", "bool.exists_bool", "bool.lt_iff", "bool.cond_ff", "bool.injective_iff", "bool.of_nat_le_of_nat", "bool.cond_eq_ite", "bool.le_iff_imp", "bool.to_nat_le_to_nat", "bool.apply_apply_apply", "bool.forall_bool", "bool.coe_bool_iff", "bool.coe_sort_tt", "bool.default_bool", "bool.coe_sort_ff", "bool.of_nat_to_nat", "bool.dichotomy"], "mathlib/src/control/basic.lean": ["fish"], "mathlib/src/control/equiv_functor.lean": ["equiv_functor.map_trans", "equiv_functor.map_refl"], "mathlib/src/category_theory/natural_isomorphism.lean": ["category_theory.iso.hom_inv_id_app_assoc", "category_theory.nat_iso.naturality_2'_assoc", "category_theory.nat_iso.hcomp_inv", "category_theory.nat_iso.hcomp_hom", "category_theory.iso.app_hom", "category_theory.nat_iso.of_components_inv_app", "category_theory.iso.app_inv", "category_theory.nat_iso.of_components_hom_app", "category_theory.iso.inv_hom_id_app_assoc"], "mathlib/src/category_theory/full_subcategory.lean": ["category_theory.full_subcategory.map_obj_obj", "category_theory.induced_functor_map", "category_theory.full_subcategory.lift_obj_obj", "category_theory.full_subcategory.ext_iff", "category_theory.full_subcategory.lift_map", "category_theory.induced_functor_obj", "category_theory.full_subcategory.map_map", "category_theory.full_subcategory.ext"], "mathlib/src/category_theory/essential_image.lean": ["category_theory.functor.to_ess_image_comp_essential_image_inclusion_hom_app", "category_theory.functor.to_ess_image_comp_essential_image_inclusion_inv_app", "category_theory.functor.to_ess_image_map", "category_theory.functor.to_ess_image_obj_obj", "category_theory.functor.ess_image_inclusion_obj", "category_theory.functor.ess_image_inclusion_map"], "mathlib/src/category_theory/isomorphism.lean": ["category_theory.is_iso.hom_inv_id_assoc", "category_theory.iso.trans_hom", "category_theory.iso.inv_hom_id_assoc", "category_theory.iso.refl_hom", "category_theory.iso.inv_hom_id", "category_theory.iso.trans_inv", "category_theory.iso.hom_inv_id_assoc", "category_theory.functor.map_iso_inv", "category_theory.functor.map_iso_hom", "category_theory.iso.refl_inv", "category_theory.is_iso.inv_hom_id_assoc", "category_theory.iso.hom_inv_id"], "mathlib/src/category_theory/natural_transformation.lean": ["category_theory.nat_trans.ext", "category_theory.nat_trans.naturality_assoc", "category_theory.nat_trans.ext_iff", "category_theory.nat_trans.naturality"], "mathlib/src/category_theory/whiskering.lean": ["category_theory.functor.right_unitor_hom_app", "category_theory.whiskering_right_obj_obj", "category_theory.functor.associator_hom_app", "category_theory.whiskering_left_map_app_app", "category_theory.functor.associator_inv_app", "category_theory.functor.right_unitor_inv_app", "category_theory.whisker_right_app", "category_theory.functor.left_unitor_inv_app", "category_theory.whiskering_right_obj_map", "category_theory.whiskering_right_map_app_app", "category_theory.whiskering_left_obj_map", "category_theory.functor.left_unitor_hom_app", "category_theory.whisker_left_app", "category_theory.whiskering_left_obj_obj"], "mathlib/src/category_theory/category/basic.lean": ["category_theory.category.assoc", "category_theory.category.id_comp", "category_theory.category.comp_id"], "mathlib/src/category_theory/functor/category.lean": ["category_theory.functor.flip_map_app", "category_theory.functor.flip_obj_map", "category_theory.functor.flip_obj_obj", "category_theory.map_hom_inv_app_assoc", "category_theory.nat_trans.hcomp_app", "category_theory.map_inv_hom_app_assoc"], "mathlib/src/category_theory/functor/basic.lean": ["category_theory.functor.map_comp", "category_theory.functor.comp_obj", "category_theory.functor.to_prefunctor_obj", "category_theory.functor.map_comp_assoc", "category_theory.functor.to_prefunctor_map", "category_theory.functor.to_prefunctor", "category_theory.functor.map_id"], "mathlib/src/category_theory/functor/fully_faithful.lean": ["category_theory.equiv_of_fully_faithful_apply", "category_theory.faithful.map_injective", "category_theory.iso.faithful_of_comp", "category_theory.nat_trans_of_comp_fully_faithful_app", "category_theory.iso_equiv_of_fully_faithful_apply", "category_theory.nat_iso_of_comp_fully_faithful_hom_app", "category_theory.functor.preimage_iso_hom", "category_theory.equiv_of_fully_faithful_symm_apply", "category_theory.iso_equiv_of_fully_faithful_symm_apply", "category_theory.full.witness", "category_theory.functor.preimage_iso_inv", "category_theory.nat_trans.equiv_of_comp_fully_faithful_symm_apply", "category_theory.nat_iso_of_comp_fully_faithful_inv_app", "eq.faithful_of_comp", "category_theory.nat_iso.equiv_of_comp_fully_faithful_apply", "category_theory.nat_iso.equiv_of_comp_fully_faithful_symm_apply", "category_theory.nat_trans.equiv_of_comp_fully_faithful_apply"], "mathlib/src/category_theory/concrete_category/bundled.lean": ["category_theory.bundled.map", "category_theory.bundled", "category_theory.bundled.of", "category_theory.bundled.coe_mk"], "lean/library/init/meta/well_founded_tactics.lean": ["well_founded_tactics.id_tag.wf", "psum.alt.sizeof", "psum.has_sizeof_alt"], "mathlib/src/order/cover.lean": ["wcovby.covby_or_eq", "covby.of_dual", "covby.to_dual", "wcovby.eq_or_covby", "has_lt.lt.exists_lt_lt", "wcovby.of_dual", "has_le.le.wcovby_of_le", "exists_lt_lt_of_not_covby", "wcovby.to_dual"], "mathlib/src/order/synonym.lean": ["lex.rec", "order_dual.exists", "order_dual.forall", "of_lex", "to_lex", "order_dual.rec", "has_le.le.dual", "has_lt.lt.dual", "lex"], "mathlib/src/order/boolean_algebra.lean": ["sdiff_eq_left", "le_sdiff"], "mathlib/src/order/closure.lean": ["galois_connection.closure_operator_apply", "lower_adjoint.closure_operator_apply", "lower_adjoint.id_to_fun", "closure_operator.id_apply", "closure_operator.mk₃_apply", "closure_operator.mk'_apply", "closure_operator.mk₂_apply", "galois_connection.lower_adjoint_to_fun"], "mathlib/src/order/modular_lattice.lean": ["inf_Ioo_order_iso_Ioo_sup_apply_coe", "covby.inf_of_sup_of_sup_left", "inf_Icc_order_iso_Icc_sup_apply_coe", "covby.sup_of_inf_right", "covby.inf_of_sup_left", "inf_Icc_order_iso_Icc_sup_symm_apply_coe", "inf_Ioo_order_iso_Ioo_sup_symm_apply_coe", "covby.sup_of_inf_left", "covby.sup_of_inf_of_inf_right", "covby.sup_of_inf_of_inf_left", "covby.inf_of_sup_right", "covby.inf_of_sup_of_sup_right"], "mathlib/src/order/atoms.lean": ["is_atom.dual", "covby.is_atom", "is_atomic_iff", "is_simple_order.has_lt.lt.eq_top", "is_coatomic_iff", "is_atom.bot_covby", "is_simple_order.equiv_bool_symm_apply", "covby.is_coatom", "is_coatom.covby_top", "is_simple_order.has_lt.lt.eq_bot", "is_simple_order.equiv_bool_apply", "is_coatom.dual"], "mathlib/src/order/initial_seg.lean": ["principal_seg.coe_fn_to_rel_embedding", "initial_seg.map_rel_iff", "principal_seg.coe_coe_fn", "initial_seg.ext", "initial_seg.coe_fn_to_rel_embedding", "initial_seg.coe_fn_mk"], "mathlib/src/order/bounded_order.lean": ["has_lt.lt.ne_bot", "is_bot.eq_bot", "is_top.eq_top", "is_min.eq_bot", "has_lt.lt.ne_top", "is_max.eq_top"], "mathlib/src/order/antisymmetrization.lean": ["order_hom.to_antisymmetrization", "antisymm_rel.setoid_r", "order_embedding.of_antisymmetrization_apply", "order_hom.to_antisymmetrization_coe", "antisymm_rel.eq"], "mathlib/src/order/rel_classes.lean": ["is_order_connected", "is_asymm.is_irrefl", "is_order_connected.neg_trans", "trans_trichotomous_left", "ne_of_irrefl'", "is_strict_order.swap", "is_partial_order.swap", "not_rel_of_subsingleton", "well_founded_lt", "is_well_founded.fix", "has_subset.subset.trans_ssubset", "is_asymm.is_antisymm", "comm_of", "well_founded_gt_dual_iff", "not_subset_of_ssubset", "is_antisymm.swap", "is_well_founded.induction", "transitive_ge", "is_total.swap", "subrelation.is_well_founded", "is_trichotomous.swap", "well_founded_gt", "is_well_founded_iff", "well_founded_lt.apply", "rel_of_subsingleton", "ssubset_of_subset_not_subset", "is_strict_total_order.swap", "has_subset.subset.not_ssubset", "well_founded_lt_dual_iff", "well_founded.asymmetric", "is_nonstrict_strict_order", "subset_antisymm_iff", "ssubset_of_ne_of_subset", "has_subset.subset.antisymm'", "antisymm_iff", "comm", "well_founded_gt.to_has_well_founded", "is_linear_order.swap", "well_founded_lt.induction", "is_well_order", "is_preorder.swap", "is_well_founded.apply", "ssubset_of_ssubset_of_subset", "is_irrefl.swap", "is_refl.swap", "has_subset.subset.eq_or_ssubset", "is_trans.swap", "is_asymm.swap", "set.not_bounded_iff", "trans_trichotomous_right", "ssubset_iff_subset_ne", "well_founded_gt.fix", "eq_or_ssubset_of_subset", "right_iff_left_not_left", "is_well_founded", "set.bounded", "well_founded_lt.fix", "set.unbounded_of_is_empty", "well_founded_lt.fix_eq", "has_subset.subset.ssubset_or_eq", "well_founded_gt.fix_eq", "empty_relation_apply", "has_ssubset.ssubset.not_subset", "is_well_order.to_has_well_founded", "set.unbounded", "right_iff_left_not_left_of", "well_founded_gt.induction", "ne.ssubset_of_subset", "ssubset_iff_subset_not_subset", "subset_iff_ssubset_or_eq", "is_well_order.linear_order", "is_total.is_trichotomous", "eq_empty_relation", "is_total_preorder.swap", "transitive_gt", "subsingleton.is_well_order", "subset_of_ssubset", "antisymm_of", "antisymm'", "well_founded_lt.to_has_well_founded", "has_subset.subset.ssubset_of_not_subset", "ssubset_or_eq_of_subset", "ne_of_irrefl", "well_founded_gt.apply", "set.not_unbounded_iff", "has_ssubset.ssubset.trans_subset", "of_eq", "transitive_le", "transitive_of_trans", "not_ssubset_of_subset", "linear_order_of_STO", "superset_antisymm_iff", "ssubset_of_subset_of_ne", "is_well_founded.to_has_well_founded", "ssubset_of_subset_of_ssubset", "has_subset.subset.ssubset_of_ne", "antisymm_of'", "transitive_lt", "partial_order_of_SO", "extensional_of_trichotomous_of_irrefl", "is_well_founded.fix_eq"], "mathlib/src/order/omega_complete_partial_order.lean": ["omega_complete_partial_order.continuous_hom.id_apply", "prod.omega_complete_partial_order_ωSup_snd", "omega_complete_partial_order.continuous_hom.coe_apply", "omega_complete_partial_order.order_hom.ωSup_coe", "omega_complete_partial_order.continuous_hom.comp_apply", "omega_complete_partial_order.continuous_hom.prod.apply_apply", "omega_complete_partial_order.order_hom.omega_complete_partial_order_ωSup_coe", "prod.ωSup_fst", "omega_complete_partial_order.continuous_hom.of_mono_apply", "prod.omega_complete_partial_order_ωSup_fst", "order_hom.bind_coe", "omega_complete_partial_order.continuous_hom.to_mono_coe", "omega_complete_partial_order.continuous_hom.map_apply", "omega_complete_partial_order.chain.map_coe", "omega_complete_partial_order.continuous_hom.flip_apply", "prod.ωSup_snd", "omega_complete_partial_order.continuous_hom.of_fun_apply", "omega_complete_partial_order.continuous_hom.ωSup_apply", "omega_complete_partial_order.chain.zip_coe", "omega_complete_partial_order.continuous_hom.bind_apply", "omega_complete_partial_order.continuous_hom.omega_complete_partial_order_ωSup", "omega_complete_partial_order.continuous_hom.seq_apply"], "mathlib/src/order/lattice.lean": ["inf_eq_and_sup_eq_iff", "inf_eq_sup", "inf_of_le_left", "le_of_sup_eq", "inf_of_le_right", "le_of_inf_eq", "sup_eq_inf", "sup_of_le_right", "sup_of_le_left"], "mathlib/src/order/disjoint.lean": ["disjoint_assoc", "disjoint_left_comm", "symmetric_codisjoint", "disjoint_iff", "disjoint.eq_bot_of_self", "top_disjoint", "codisjoint_top_right", "disjoint_sup_left", "codisjoint_bot", "codisjoint_self", "codisjoint_inf_right", "codisjoint_left_comm", "codisjoint_right_comm", "disjoint_top", "symmetric_disjoint", "disjoint_bot_left", "codisjoint_inf_left", "bot_codisjoint", "codisjoint_top_left", "codisjoint.eq_top_of_self", "disjoint_right_comm", "disjoint_self", "disjoint_iff_inf_le", "codisjoint_assoc", "disjoint_sup_right"], "mathlib/src/order/basic.lean": ["has_le.le.trans_lt", "has_le.le.eq_or_lt_dec", "has_le.le.trans_eq", "has_le.le.lt_of_ne", "has_le.le.lt_of_not_le", "strong_lt.trans_le", "eq.trans_gt", "has_le.le.antisymm", "strong_lt.lt", "has_le.le.not_lt", "has_le.le.eq_of_not_gt", "strong_lt.le", "has_le.ext", "has_le.le.lt_of_ne'", "has_le.le.eq_or_gt", "has_lt.lt.trans_le", "has_lt.lt.asymm", "has_le.le.trans'", "has_lt.lt.trans'", "has_lt.lt.not_lt", "eq.trans_le", "has_le.le.trans_strong_lt", "has_le.ext_iff", "has_lt.lt.trans", "has_le.le.lt_or_eq_dec", "has_le.le.antisymm'", "has_le.le.lt_or_eq", "has_le.le.trans_lt'", "has_le.le.trans", "has_le.le.eq_of_not_lt", "has_lt.lt.not_le", "has_lt.lt.le", "has_le.le.trans_eq'", "eq.trans_lt", "has_lt.lt.trans_eq'", "has_le.le.eq_or_lt", "eq.le", "has_lt.lt.trans_le'", "eq.trans_ge", "has_lt.lt.trans_eq"], "mathlib/src/order/max.lean": ["is_max.of_dual", "no_top_order_iff_no_max_order", "is_bot.of_dual", "is_min.of_dual", "is_max", "is_min", "is_top.to_dual", "has_lt.lt.not_is_max", "is_bot", "is_top", "no_max_order.not_acc", "is_max.to_dual", "has_lt.lt.not_is_min", "no_min_order.not_acc", "is_bot.to_dual", "no_bot_order_iff_no_min_order", "is_top.of_dual", "is_min.to_dual"], "mathlib/src/order/compare.lean": ["lt_iff_lt_of_cmp_eq_cmp", "cmp_eq_cmp_symm", "cmp_self_eq_eq", "cmp_eq_gt_iff", "ordering.compares.eq_eq", "cmp_swap", "cmp_eq_lt_iff", "cmp_compares", "eq.cmp_eq_eq'", "ordering.compares.ne_gt", "ordering.compares", "ordering.compares.le_antisymm", "eq_iff_eq_of_cmp_eq_cmp", "linear_order_of_compares", "ordering.compares.le_total", "ordering.compares.eq_lt", "ordering.compares.of_swap", "has_lt.lt.cmp_eq_gt", "ordering.swap_inj", "ordering.compares.swap", "has_lt.lt.cmp_eq_lt", "ordering.compares.inj", "ordering.compares_swap", "ordering.compares.ne_lt", "le_iff_le_of_cmp_eq_cmp", "ordering.compares_iff_of_compares_impl", "ordering.swap_eq_iff_eq_swap", "eq.cmp_eq_eq", "cmp_eq_eq_iff", "ordering.compares.cmp_eq", "ordering.compares.eq_gt"], "mathlib/src/order/complete_lattice.lean": ["Inf_prod", "Sup_prod"], "mathlib/src/order/concept.lean": ["concept.swap_equiv_apply", "concept.swap_to_prod", "concept.swap_equiv_symm_apply"], "mathlib/src/order/game_add.lean": ["prod.game_add.fix_eq", "prod.game_add_swap_swap", "prod.game_add.fix", "prod.game_add_mk_iff", "prod.game_add.induction", "prod.game_add_iff"], "mathlib/src/order/heyting/basic.lean": ["sup_sdiff_self_right", "le_compl_iff_le_compl", "sup_sdiff_self_left", "codisjoint.hnot_le_right", "le_compl_of_le_compl", "codisjoint.hnot_le_left", "disjoint.le_compl_right", "disjoint.le_compl_left"], "mathlib/src/order/filter/basic.lean": ["eventually_le.add_le_add", "tactic_doc.tactic.filter_upwards"], "mathlib/src/order/rel_iso/basic.lean": ["rel_iso.to_rel_embedding_eq_coe", "rel_embedding.prod_lex_mk_right_apply", "rel_hom.comp_apply", "rel_embedding.prod_lex_mk_left_apply", "quotient.out_rel_embedding_apply", "rel_iso.refl_apply", "rel_iso.trans_apply", "rel_embedding.sum_lift_rel_inr_apply", "rel_embedding.coe_fn_to_embedding", "rel_embedding.sum_lex_inl_apply", "rel_embedding.sum_lex_inr_apply", "rel_embedding.sum_lift_rel_inl_apply", "rel_hom.id_apply", "rel_iso.of_surjective_apply", "rel_embedding.to_rel_hom_eq_coe", "well_founded.of_quotient_lift₂", "rel_hom.coe_fn_mk", "rel_embedding.refl_apply", "well_founded.quotient_lift₂", "rel_iso.cast_to_equiv", "rel_iso.coe_coe_fn", "rel_embedding.coe_fn_mk", "rel_embedding.coe_coe_fn", "rel_embedding.sum_lex_map_apply", "rel_embedding.prod_lex_map_apply", "rel_iso.cast_apply", "rel_embedding.sum_lift_rel_map_apply"], "mathlib/src/order/hom/set.lean": ["order_iso.compl_apply", "order_iso.compl_symm_apply", "strict_mono.order_iso_apply"], "mathlib/src/order/hom/bounded.lean": ["top_hom.dual_symm_apply_apply", "bot_hom.dual_symm_apply_apply", "top_hom.dual_apply_apply", "bounded_order_hom.dual_apply_to_order_hom", "bounded_order_hom.dual_symm_apply_to_order_hom", "bot_hom.dual_apply_apply"], "mathlib/src/order/hom/basic.lean": ["order_hom.pi_iso_apply", "order_hom.pi_coe", "order_hom.comp_coe", "strict_mono.order_iso_of_right_inverse_apply", "strict_mono.order_iso_of_right_inverse_symm_apply", "order_hom.coe_fn_hom_coe", "order_iso.with_top_congr_apply", "order_embedding.to_order_hom_coe", "order_hom.prod_map_coe", "rel_hom.to_order_hom_coe", "order_hom.id_coe", "order_hom.prodₘ_coe_coe_coe", "order_iso.with_bot_congr_apply", "order_hom.fst_coe", "order_embedding.with_top_map_apply", "order_hom.prod_coe", "order_hom.subtype.val_coe", "order_iso.fun_unique_to_equiv", "order_embedding.subtype_apply", "order_hom.dual_apply_coe", "order_hom.prod_iso_apply", "order_iso.fun_unique_apply", "order_hom.pi_iso_symm_apply", "order_hom.with_bot_map_coe", "order_hom.prod_iso_symm_apply", "order_hom.diag_coe", "pi.eval_order_hom_coe", "order_hom.snd_coe", "order_hom.on_diag_coe", "order_hom.with_top_map_coe", "order_hom.compₘ_coe_coe_coe", "order_hom.const_coe_coe", "order_hom.dual_symm_apply_coe", "order_hom.apply_coe", "order_embedding.with_bot_map_apply"], "mathlib/src/order/hom/order.lean": ["order_hom.has_top_top", "order_hom.has_sup_sup_coe", "order_hom.has_bot_bot", "order_hom.has_inf_inf_coe"], "mathlib/src/order/succ_pred/limit.lean": ["order.is_succ_limit.dual", "order.is_pred_limit.dual"], "mathlib/src/order/succ_pred/basic.lean": ["succ_order.of_core_succ", "pred_order.ext_iff", "pred_order.of_core_pred", "succ_order.ext_iff", "succ_order.ext", "pred_order.ext"], "mathlib/src/order/monotone/basic.lean": ["antitone_on.dual_right", "strict_anti.le_iff_le", "strict_anti_on.dual", "antitone", "monotone_on.reflect_lt", "antitone.dual", "strict_mono", "strict_mono.minimal_of_minimal_image", "monotone.dual_right", "subsingleton.antitone", "list.foldl_monotone", "antitone.imp", "strict_anti.antitone", "antitone.ne_of_lt_of_lt_nat", "monotone_iff_forall_lt", "strict_mono_on.dual", "monotone.comp_antitone", "strict_mono.maximal_of_maximal_image", "strict_anti", "strict_mono.le_iff_le", "list.foldr_monotone", "strict_mono_on.dual_right", "monotone.ne_of_lt_of_lt_nat", "subsingleton.monotone'", "monotone_on.dual", "monotone_snd", "strict_mono.comp", "monotone_id", "strict_anti.ite'", "strict_mono_on.dual_left", "strict_anti.imp", "not_monotone_not_antitone_iff_exists_le_le", "strict_mono.dual", "monotone.prod_map", "antitone.antitone_on", "monotone_fst", "strict_anti.compares", "monotone.dual", "injective_of_le_imp_le", "function.const_mono", "strict_anti.dual_left", "strict_anti_on.dual_right", "antitone_on.dual", "antitone.prod_map", "monotone.comp_le_comp_left", "monotone.imp", "antitone.ne_of_lt_of_lt_int", "strict_mono.compares", "strict_anti.comp", "strict_mono.ite", "monotone.monotone_on", "antitone_iff_forall_lt", "strict_anti.prod_map", "monotone_on.dual_left", "function.monotone_eval", "monotone_on", "antitone.comp_monotone", "strict_anti_on.le_iff_le", "strict_mono.ite'", "antitone_int_of_succ_le", "strict_mono.prod_map", "strict_mono.dual_right", "monotone.comp", "strict_anti.maximal_of_minimal_image", "monotone_lam", "int.rel_of_forall_rel_succ_of_lt", "antitone_app", "monotone.reflect_lt", "strict_mono_on.eq_iff_eq", "monotone_on.dual_right", "strict_mono_on.cmp_map_eq", "strict_anti.lt_iff_lt", "strict_mono.cmp_map_eq", "strict_anti.cmp_map_eq", "strict_anti.dual_right", "not_monotone_not_antitone_iff_exists_lt_lt", "strict_anti_on.cmp_map_eq", "strict_mono.iterate", "strict_anti_nat_of_succ_lt", "subsingleton.antitone'", "monotone_app", "antitone_on", "antitone_lam", "int.rel_of_forall_rel_succ_of_le", "strict_anti.dual", "antitone_on.reflect_lt", "strict_anti_on", "monotone.ne_of_lt_of_lt_int", "antitone.dual_left", "antitone.dual_right", "antitone.comp", "strict_anti_on.compares", "strict_anti_on.eq_iff_eq", "strict_anti_on.dual_left", "monotone_const", "subsingleton.monotone", "strict_mono.id_le", "antitone.reflect_lt", "strict_mono_on.le_iff_le", "antitone_const", "strict_mono.monotone", "strict_anti_on.lt_iff_lt", "strict_mono.dual_left", "antitone_on.dual_left", "monotone.dual_left", "subtype.mono_coe", "strict_anti.minimal_of_maximal_image", "strict_mono_on.lt_iff_lt", "monotone", "strict_mono_on", "strict_mono.imp", "monotone_int_of_le_succ"], "mathlib/src/group_theory/is_free_group.lean": ["is_free_group.to_free_group_symm_apply", "is_free_group.to_free_group_apply"], "mathlib/src/group_theory/congruence.lean": ["add_con.quotient_ker_equiv_of_right_inverse_apply", "add_con.add_con_gen_of_add_con", "con.quotient_ker_equiv_of_right_inverse_symm_apply", "con.quotient_ker_equiv_of_right_inverse_apply", "add_con.quotient_ker_equiv_of_right_inverse_symm_apply"], "mathlib/src/group_theory/free_group.lean": ["free_group.lift_symm_apply", "free_add_group.free_add_group_congr_apply", "free_group.free_group_congr_apply", "free_add_group.lift_symm_apply"], "mathlib/src/group_theory/group_action/defs.lean": ["distrib_smul.ext_iff", "add_action.ext_iff", "mul_action.ext", "add_action.ext", "smul_zero_class.to_zero_hom_apply", "mul_distrib_mul_action.ext", "mul_distrib_mul_action.ext_iff", "smul_one_hom_apply", "distrib_smul.to_add_monoid_hom_apply", "distrib_mul_action.ext_iff", "mul_distrib_mul_action.to_monoid_End_apply", "distrib_smul.ext", "vadd_zero_hom_apply", "mul_action.ext_iff", "distrib_mul_action.ext", "distrib_mul_action.to_add_monoid_End_apply", "distrib_mul_action.to_add_monoid_hom_apply"], "mathlib/src/group_theory/group_action/prod.lean": ["smul_monoid_hom_apply", "smul_mul_hom_apply"], "mathlib/src/group_theory/group_action/group.lean": ["mul_distrib_mul_action.to_mul_aut_apply", "mul_action.to_perm_apply", "mul_aut_arrow_apply_symm_apply", "arrow_action_to_has_smul_smul", "distrib_mul_action.to_add_equiv_apply", "mul_action.to_perm_hom_apply", "add_action.to_perm_hom_apply", "add_action.to_perm_apply", "mul_action.to_perm_symm_apply", "mul_aut_arrow_apply_apply", "distrib_mul_action.to_add_aut_apply", "add_action.to_perm_symm_apply", "arrow_add_action_to_has_vadd_vadd", "mul_distrib_mul_action.to_mul_equiv_apply", "distrib_mul_action.to_add_equiv_symm_apply", "mul_distrib_mul_action.to_mul_equiv_symm_apply"], "mathlib/src/group_theory/subsemigroup/operations.lean": ["mul_equiv.subsemigroup_map_apply_coe", "add_hom.cod_restrict_apply_coe", "add_subsemigroup.top_equiv_apply", "mul_equiv.subsemigroup_map_symm_apply_coe", "add_subsemigroup.top_equiv_symm_apply_coe", "add_equiv.subsemigroup_map_symm_apply_coe", "mul_hom.subsemigroup_comap_apply_coe", "add_subsemigroup.to_subsemigroup_apply_coe", "add_hom.subsemigroup_comap_apply_coe", "subsemigroup.top_equiv_symm_apply_coe", "subsemigroup.to_add_subsemigroup_apply_coe", "add_subsemigroup.to_subsemigroup_symm_apply_coe", "add_hom.subsemigroup_map_apply_coe", "add_equiv.of_left_inverse_apply", "add_equiv.subsemigroup_map_apply_coe", "subsemigroup.to_add_subsemigroup_symm_apply_coe", "mul_equiv.of_left_inverse_apply", "mul_hom.cod_restrict_apply_coe", "subsemigroup.top_equiv_apply", "add_equiv.of_left_inverse_symm_apply", "mul_equiv.of_left_inverse_symm_apply", "mul_hom.subsemigroup_map_apply_coe"], "mathlib/src/group_theory/submonoid/membership.lean": ["submonoid.pow_log_equiv_symm_apply", "submonoid.pow_log_equiv_apply", "submonoid.pow_coe"], "mathlib/src/group_theory/submonoid/basic.lean": ["submonoid.to_subsemigroup", "add_submonoid.to_add_subsemigroup"], "mathlib/src/group_theory/submonoid/operations.lean": ["add_equiv.of_left_inverse'_symm_apply", "submonoid.to_add_submonoid_apply_coe", "mul_equiv.of_left_inverse'_apply", "add_submonoid.equiv_map_of_injective_coe_add_equiv", "mul_equiv.submonoid_map_symm_apply", "add_submonoid.top_equiv_symm_apply_coe", "submonoid.top_equiv_apply", "submonoid.equiv_map_of_injective_coe_mul_equiv", "submonoid.to_add_submonoid_symm_apply_coe", "mul_equiv.coe_submonoid_map_apply", "add_submonoid.coe_nsmul", "add_equiv.of_left_inverse'_apply", "add_equiv.add_submonoid_map_symm_apply", "add_monoid_hom.add_submonoid_comap_apply_coe", "add_monoid_hom.add_submonoid_map_apply_coe", "monoid_hom.submonoid_comap_apply_coe", "add_submonoid.to_submonoid_apply_coe", "add_submonoid.top_equiv_apply", "submonoid.top_equiv_symm_apply_coe", "monoid_hom.cod_restrict_apply", "add_equiv.coe_add_submonoid_map_apply", "add_monoid_hom.cod_restrict_apply", "mul_equiv.of_left_inverse'_symm_apply", "monoid_hom.submonoid_map_apply_coe", "add_submonoid.to_submonoid_symm_apply_coe"], "mathlib/src/group_theory/subgroup/zpowers.lean": ["add_subgroup.forall_zmultiples", "add_subgroup.zsmul_mem_zmultiples", "add_subgroup.exists_mem_zmultiples", "add_subgroup.mem_zmultiples", "add_subgroup.nsmul_mem_zmultiples", "add_subgroup.forall_mem_zmultiples", "add_subgroup.zmultiples_subset", "add_subgroup.exists_zmultiples", "add_subgroup.mem_zmultiples_iff", "add_subgroup.zmultiples_eq_closure"], "mathlib/src/group_theory/subgroup/basic.lean": ["add_subgroup.top_equiv_symm_apply_coe", "subgroup.to_submonoid", "add_subgroup.to_add_submonoid", "add_subgroup.to_subgroup_symm_apply_coe", "monoid_hom.subgroup_comap_apply_coe", "subgroup.to_add_subgroup_apply_coe", "add_subgroup.top_equiv_apply", "subgroup.top_equiv_apply", "subgroup.top_equiv_symm_apply_coe", "add_monoid_hom.add_subgroup_map_apply_coe", "add_subgroup.add_subgroup_of_equiv_of_le_apply_coe", "subgroup.subgroup_of_equiv_of_le_apply_coe", "add_subgroup.add_subgroup_of_equiv_of_le_symm_apply_coe_coe", "subgroup.subgroup_of_equiv_of_le_symm_apply_coe_coe", "monoid_hom.subgroup_map_apply_coe", "subgroup.to_add_subgroup_symm_apply_coe", "add_monoid_hom.add_subgroup_comap_apply_coe", "add_subgroup.to_subgroup_apply_coe"], "mathlib/src/group_theory/subgroup/mul_opposite.lean": ["subgroup.opposite_equiv_apply_coe", "add_subgroup.opposite_equiv_apply_coe", "add_subgroup.opposite_equiv_symm_apply_coe", "subgroup.opposite_equiv_symm_apply_coe"], "mathlib/src/group_theory/perm/basic.lean": ["equiv.perm.equiv_units_End_symm_apply_apply", "equiv.inv_add_right", "equiv.add_right_zero", "equiv.perm.equiv_units_End_symm_apply_symm_apply", "equiv.perm.sigma_congr_right_hom_apply", "equiv.perm.sum_congr_hom_apply", "equiv.perm.extend_domain_hom_apply", "equiv.perm.subtype_equiv_subtype_perm_symm_apply", "equiv.pow_mul_left", "equiv.mul_left_mul", "equiv.perm.extend_domain_zpow", "equiv.mul_left_one", "equiv.pow_add_left", "equiv.zpow_add_right", "equiv.perm.coe_inv_equiv_units_End_apply", "equiv.pow_mul_right", "equiv.perm.coe_equiv_units_End_apply", "monoid_hom.to_hom_perm_apply_apply", "equiv.zpow_add_left", "equiv.perm.subtype_equiv_subtype_perm_apply_coe", "equiv.add_left_zero", "equiv.inv_mul_right", "equiv.add_left_add", "set.bij_on.of_perm_inv", "equiv.inv_add_left", "equiv.add_right_add", "monoid_hom.to_hom_perm_apply_symm_apply", "set.bij_on_perm_inv", "equiv.zpow_mul_right", "equiv.mul_right_one", "equiv.zpow_mul_left", "equiv.inv_mul_left", "equiv.pow_add_right", "equiv.perm.subtype_congr_hom_apply", "equiv.perm.extend_domain_pow", "equiv.mul_right_mul"], "mathlib/src/logic/is_empty.lean": ["is_empty.exists_iff", "is_empty.elim", "is_empty", "is_empty_elim", "not_nonempty_iff", "is_empty.elim'", "is_empty.prop_iff", "is_empty.forall_iff"], "mathlib/src/logic/relator.lean": ["relator.left_total.rel_exists", "relator.rel_imp", "relator.rel_eq", "relator.left_unique.flip", "relator.left_total", "relator.right_unique", "relator.left_unique", "relator.rel_not", "relator.rel_and", "relator.left_unique_of_rel_eq", "relator.bi_unique", "relator.bi_total.rel_exists", "relator.right_total", "relator.bi_total_eq", "relator.bi_total", "relator.rel_or", "relator.lift_fun", "relator.bi_total.rel_forall", "relator.right_total.rel_forall", "relator.rel_iff"], "mathlib/src/logic/pairwise.lean": ["function.injective.pairwise_ne"], "mathlib/src/logic/lemmas.lean": ["Prop.exists", "dite_dite_distrib_right", "dite_ite_distrib_left", "ite_dite_distrib_right", "Prop.forall", "ite_dite_distrib_left", "ne.trans_eq", "eq.trans_ne", "ite_ite_distrib_right", "heq.eq", "eq.heq", "ite_ite_distrib_left", "dite_ite_distrib_right", "dite_dite_distrib_left"], "mathlib/src/logic/nonempty.lean": ["classical.nonempty_pi", "classical.inhabited_of_nonempty'", "nonempty_pprod", "not_nonempty_iff_imp_false", "nonempty.congr", "nonempty_subtype", "nonempty_prod", "nonempty_ulift", "nonempty.elim_to_inhabited", "nonempty.forall", "nonempty_empty", "exists_true_iff_nonempty", "subsingleton_of_not_nonempty", "nonempty.exists", "nonempty.map", "nonempty_psum", "nonempty_sigma", "nonempty_sum", "nonempty_psigma", "nonempty_Prop", "nonempty.some", "nonempty.map2", "function.surjective.nonempty", "classical.arbitrary", "nonempty_plift"], "mathlib/src/logic/relation.lean": ["relation.church_rosser", "relation.refl_gen.mono", "reflexive_ne_imp_iff", "relation.trans_gen.trans_induction_on", "relation.reflexive_join", "relation.refl_trans_gen.cases_tail", "relation.refl_trans_gen.lift'", "relation.iff_comp", "relation.join", "acc.of_fibration", "relation.refl_trans_gen", "symmetric.iff", "relation.flip_comp", "relation.refl_trans_gen.mono", "relation.trans_gen.trans_right", "relation.refl_trans_gen.head_induction_on", "relation.trans_gen.tail'", "relation.trans_gen.head_induction_on", "relation.refl_trans_gen.cases_head", "relation.refl_trans_gen.head", "relation.refl_trans_gen_idem", "flip_eq_iff", "symmetric.swap_eq", "relation.trans_gen.mono", "relation.trans_gen.lift'", "relation.trans_gen.closed", "relation.refl_trans_gen.trans_induction_on", "relation.trans_gen", "relation.trans_gen.lift", "reflexive.comap", "swap_eq_iff", "relation.refl_trans_gen.trans", "relation.trans_gen.swap", "relation.comp_eq", "relation.trans_gen.trans", "relation.refl_trans_gen.cases_tail_iff", "relation.trans_gen.head'", "relation.refl_trans_gen.cases_head_iff", "relation.refl_trans_gen.swap", "symmetric.comap", "relation.eq_comp", "relation.equivalence_join", "eqv_gen.mono", "acc.trans_gen", "relation.trans_gen.head'_iff", "relation.join_of_single", "relation.map", "reflexive.rel_of_ne_imp", "relation.refl_trans_gen.symmetric", "relation.transitive_join", "relation.symmetric_join", "relation.refl_trans_gen.total_of_right_unique", "relation.trans_gen.tail'_iff", "transitive.comap", "relation.trans_gen.head", "relation.comp", "relation.refl_trans_gen.single", "acc.of_downward_closed", "relation.comp_assoc", "symmetric.flip_eq", "equivalence.comap", "relation.join_of_equivalence", "relation.comp_iff", "relation.trans_gen.trans_left", "relation.refl_gen", "relation.refl_trans_gen.lift", "relation.fibration", "reflexive.ne_imp_iff", "is_refl.reflexive"], "mathlib/src/logic/basic.lean": ["decidable.not_imp_comm", "bex_def", "decidable.or_not_of_imp", "ne.ite_ne_left_iff", "ball_mem_comm", "imp_iff_not_or", "coe_fn_coe_trans", "bex_of_exists", "proof_irrel_heq", "Exists₂.imp", "exists_eq_right_right'", "not_forall_not", "exists_unique_const", "coe_fn_coe_base", "ite_ite_comm", "forall_true_iff", "iff.not_right", "imp_self", "forall₂_congr", "not_and_of_not_right", "dite_eq_iff", "congr_refl_left", "not_forall", "coe_sort_coe_base", "ne_of_mem_of_not_mem'", "Exists.snd", "exists_iff_of_forall", "forall_prop_congr'", "not_or_of_imp", "exists_or_eq_left", "exists_false", "classical.dec_rel", "ite_ne_right_iff", "pempty.elim", "forall_of_ball", "or_self_left", "xor_true", "forall_eq_apply_imp_iff'", "classical.dec", "iff_true_left", "not.imp", "congr_arg_refl", "decidable.not_forall", "bex_congr", "exists₂_comm", "and_congr_left'", "iff.imp", "exists_const", "decidable.not_iff_not", "eq_iff_iff", "dite_eq_left_iff", "eq_mp_eq_cast", "hidden", "forall_eq_apply_imp_iff", "or_iff_right_iff_imp", "dite_eq_ite", "xor_not_not", "empty.elim", "iff.iff", "and_and_and_comm", "forall_prop_of_true", "and_rotate", "ne.ite_ne_right_iff", "or_of_or_of_imp_right", "exists_apply_eq_apply'", "and_not_self_iff", "dite_dite_comm", "congr_refl_right", "exists_unique.unique", "exists_prop", "ball_of_forall", "exists_eq_left", "or_or_or_comm", "exists_eq_right_right", "forall₄_congr", "classical.dec_pred", "iff_iff_and_or_not_and_not", "by_contra", "or.imp3", "decidable.not_imp_not", "decidable.iff_not_comm", "xor_not_right", "forall_apply_eq_imp_iff₂", "not_iff_comm", "or_or_distrib_right", "dite_ne_left_iff", "not_and_of_not_or_not", "of_not_imp", "exists_eq'", "forall_prop_congr", "ne_and_eq_iff_right", "exists_apply_eq_apply", "forall₂_swap", "ne.dite_ne_left_iff", "ite_eq_right_iff", "and_iff_right_iff_imp", "exists_of_bex", "forall_forall_const", "dec_em'", "exists_prop_congr'", "funext₃", "forall_prop_of_false", "not_iff_not", "forall_eq'", "exists₂_congr", "imp_false", "xor_self", "eq_iff_true_of_subsingleton", "Exists₃.imp", "ne.ite_eq_right_iff", "iff_true_right", "not_nonempty_pempty", "eq.congr", "ne.dite_eq_right_iff", "decidable.not_exists_not", "not_ball_of_bex_not", "ite_and", "and_self_right", "not_xor", "classical.by_contradiction'", "or_iff_right", "forall_true_left", "not_imp_comm", "iff_iff_not_or_and_or_not", "congr_fun₂", "cast_eq_iff_heq", "decidable.imp_iff_not_or", "exists_swap", "fact_iff", "forall_const", "not_and", "decidable.and_or_imp", "dec_em", "iff_of_false", "not_of_not_imp", "or_not", "plift.down_injective", "or_self_right", "dite_eq_iff'", "forall_eq", "peirce", "imp_intro", "and_iff_left_iff_imp", "exists_or_eq_right", "imp.swap", "eq_mpr_eq_cast", "dite_not", "peirce'", "exists₄_congr", "imp_true_iff", "ne.ite_eq_left_iff", "exists_unique_prop_of_true", "iff.or", "xor_false", "and_iff_right_of_imp", "iff_false_left", "eq.congr_right", "exists_unique.exists", "forall_apply_eq_imp_iff", "coe_coe", "forall₂_imp", "or_iff_not_imp_left", "not_and'", "xor_iff_not_iff", "ite_eq_or_eq", "iff_def", "exists_eq_right", "decidable.and_iff_not_or_not", "function.swap₂", "or_of_or_of_imp_of_imp", "rec_heq_of_heq", "eq.congr_left", "xor_not_left", "exists_unique_iff_exists", "coe_fn_coe_trans'", "forall₃_congr", "ulift.down_inj", "and.imp_left", "false_ne_true", "not_imp_not", "fact", "exists.classical_rec_on", "dite_eq_right_iff", "not_ball", "exists_unique_prop", "imp_iff_or_not", "not_and_not_right", "ne_of_apply_ne", "or_iff_left_iff_imp", "not_imp", "exists₅_congr", "subsingleton_of_forall_eq", "xor_iff_iff_not", "auto_param.out", "exists_true_left", "decidable.not_imp", "ball_true_iff", "imp_iff_right_iff", "forall_swap", "decidable.not_ball", "by_contradiction", "exists_eq_left'", "or_of_or_of_imp_left", "eq_equivalence", "forall₃_imp", "exists₃_congr", "or_iff_not_imp_right", "eq_or_ne", "congr_heq", "imp_not_comm", "coe_fn_coe_base'", "ne.dite_eq_left_iff", "exists_unique_eq'", "decidable.ne_or_eq", "ite_apply", "function.mtr", "exists_or_eq_right'", "dite_ne_right_iff", "iff_of_true", "or_not_of_imp", "and.imp_right", "ball_cond_comm", "exists_comm", "function.mt", "ne_comm", "exists_or_eq_left'", "and.rotate", "classical.dec_eq", "pi_congr", "decidable.of_not_imp", "imp_imp_imp", "decidable.not_or_of_imp", "iff_self_and", "ne.dite_ne_right_iff", "iff_not_comm", "funext₂", "and_iff_not_or_not", "classical.exists_cases", "exists_prop_of_true", "congr_fun₃", "or_iff_not_and_not", "imp_forall_iff", "or.elim3", "ulift.down_injective", "classical.cases", "decidable.iff_iff_and_or_not_and_not", "not_forall_of_exists_not", "iff_def'", "forall_eq_or_imp", "forall_apply_eq_imp_iff'", "forall_imp", "eq_iff_eq_cancel_right", "has_mem.mem.ne_of_not_mem", "decidable.or_iff_not_and_not", "not_and_of_not_left", "iff_iff_eq", "and_or_imp", "fact.elim", "coe_sort_coe_trans", "exists_prop_of_false", "heq_iff_eq", "decidable.iff_iff_not_or_and_or_not", "xor_iff_not_iff'", "bex_eq_left", "not_ne_iff", "exists_unique_false", "ne_of_mem_of_not_mem", "em'", "congr_fun_congr_arg", "Exists.fst", "decidable.not_iff", "forall_or_of_or_forall", "ne_or_eq", "apply_ite", "eq_iff_eq_cancel_left", "and_self_left", "subsingleton_iff_forall_eq", "eq_rec_constant", "cast_cast", "ne.ne_or_ne", "imp_not_self", "not_iff", "iff_and_self", "exists_unique_eq", "decidable.not_forall_not", "ball_congr", "ite_not", "decidable.not_imp_symm", "forall₅_congr", "not.decidable_imp_symm", "eq_true_eq_id", "congr_fun_rfl", "forall_imp_iff_exists_imp", "of_not_not", "iff.not", "Exists.imp", "em", "not.elim", "iff_false_right", "forall_true_iff'", "decidable.not_iff_comm", "not_not", "decidable.eq_or_ne", "ite_eq_iff'", "not_imp_of_and_not", "decidable.not_not", "apply_dite", "xor_comm", "iff_of_eq", "or_rotate", "exists_prop_congr", "decidable.not_imp_self", "eq_true_iff", "forall_exists_index", "not.imp_symm", "dite_eq_or_eq", "opt_param.out", "and_imp", "exists_eq_right'", "and.exists", "decidable.not_and_not_right", "exists_exists_eq_and", "not_exists", "iff.not_left", "plift.down_inj", "xor.or", "ite_eq_left_iff", "exists_eq", "not_exists_of_forall_not", "congr_arg_heq", "ite_ne_left_iff", "iff.and", "not_not_of_not_imp", "and_iff_left_of_imp", "dite_apply", "ite_eq_iff", "not_exists_not", "or_or_distrib_left", "decidable.peirce", "not_bex", "not_and_self_iff", "iff_mpr_iff_true_intro", "or.rotate", "exists_exists_and_eq_and", "heq_of_cast_eq", "decidable.imp_iff_right_iff", "not_imp_self", "decidable.or_iff_not_imp_left", "has_mem.mem.ne_of_not_mem'"], "mathlib/src/logic/nontrivial.lean": ["function.injective.nontrivial", "not_nontrivial_iff_subsingleton", "nontrivial_iff", "pi.nontrivial_at", "subsingleton_iff", "nontrivial_of_lt", "nontrivial_of_ne", "nontrivial", "function.surjective.nontrivial", "false_of_nontrivial_of_subsingleton", "subtype.nontrivial_iff_exists_ne", "exists_ne", "exists_pair_lt", "not_subsingleton", "subsingleton.le", "decidable.exists_ne", "nontrivial_psum_unique", "nontrivial_iff_lt", "subsingleton_or_nontrivial", "function.injective.exists_ne", "exists_pair_ne", "nontrivial_iff_exists_ne", "not_nontrivial"], "mathlib/src/logic/unique.lean": ["unique.default_eq", "function.surjective.subsingleton", "unique.mk'", "heq_const_of_unique", "function.injective.subsingleton", "function.surjective.unique", "eq_const_of_unique", "unique", "unique_iff_exists_unique", "unique_of_subsingleton", "unique_prop", "pi.default_def", "unique.bijective", "unique.exists_iff", "unique.eq_default", "unique.subsingleton_unique'", "function.injective.unique", "function.surjective.unique_of_surjective_const", "unique.forall_iff", "fin.eq_zero", "unique.ext_iff", "pi.default_apply", "unique_iff_subsingleton_and_nonempty", "fin.default_eq_zero", "unique.ext", "unique_subtype_iff_exists_unique"], "mathlib/src/logic/embedding/set.lean": ["function.embedding.image_apply", "function.embedding.option_embedding_equiv_apply_snd_coe", "subtype_or_equiv_apply", "function.embedding.option_embedding_equiv_symm_apply", "function.embedding.coe_with_top_apply", "function.embedding.option_embedding_equiv_apply_fst", "function.embedding.option_elim_apply", "set.embedding_of_subset_apply"], "mathlib/src/logic/embedding/basic.lean": ["function.embedding.congr_apply", "function.embedding.inl_apply", "function.embedding.inr_apply", "function.embedding.sigma_map_apply", "function.embedding.Pi_congr_right_apply", "subtype.imp_embedding_apply_coe", "function.embedding.sectl_apply", "function.embedding.coe_option_apply", "function.embedding.option_map_apply", "function.embedding.refl_apply", "function.embedding.sectr_apply", "equiv.coe_eq_to_embedding", "equiv.embedding_congr_apply", "equiv.as_embedding_apply", "function.embedding.some_apply", "function.embedding.trans_apply"], "mathlib/src/logic/function/conjugate.lean": ["function.commute.id_right", "function.semiconj₂", "function.semiconj.commute", "function.commute.refl", "function.semiconj₂.eq", "function.semiconj₂.comp_eq", "function.semiconj₂.id_left", "function.commute.symm", "function.semiconj.comp_left", "function.semiconj", "function.semiconj.id_right", "function.commute.option_map", "function.semiconj.option_map", "function.commute.id_left", "function.semiconj₂.comp", "function.commute.comp_left", "function.semiconj.inverses_right", "function.commute", "function.commute.comp_right", "function.semiconj.eq", "function.semiconj.comp_eq", "function.semiconj.id_left", "function.semiconj.comp_right"], "mathlib/src/logic/function/basic.lean": ["function.uncurry_def", "function.bicompr", "function.surjective.exists₃", "function.injective2.right'", "function.funext_iff", "function.not_surjective_Type", "function.uncurry_bicompl", "function.update_same", "function.update_idem", "function.const_comp", "function.extend_def", "function.exists_update_iff", "function.left_inverse.eq_rec_eq", "function.surjective.injective_comp_right", "function.involutive.ite_not", "function.left_inverse.eq_rec_on_eq", "function.right_inverse.comp", "function.update_noteq", "function.const_apply", "function.injective2.left'", "function.update_eq_self_iff", "function.ne_update_self_iff", "function.sometimes", "function.injective.decidable_eq", "function.bijective.comp_left", "function.left_inverse.comp_eq_id", "function.injective.surjective_comp_right", "function.uncurry_bicompr", "function.cantor_surjective", "function.bijective.of_comp_iff", "eq_mpr_bijective", "function.involutive.eq_iff", "function.eq_update_iff", "function.involutive.comp_self", "function.injective.comp_left", "function.const_inj", "function.update_eq_self", "function.involutive_iff_iter_2_eq_id", "function.left_inverse.surjective", "function.left_inverse.cast_eq", "function.bijective_iff_has_inverse", "function.const_def", "function.sometimes_spec", "function.apply_update", "function.injective.of_comp", "function.left_inverse.comp", "function.eval", "function.update_injective", "function.update_comp_eq_of_injective", "function.surjective_to_subsingleton", "function.surjective.of_comp_iff'", "function.injective.eq_iff'", "function.injective2", "eq_rec_inj", "function.cantor_injective", "inv_image.equivalence", "function.ne_iff", "function.update_eq_iff", "cast_inj", "set.piecewise", "function.bijective.of_comp_iff'", "function.is_partial_inv", "function.inv_fun", "function.extend_injective", "function.surjective.forall₂", "cast_bijective", "function.involutive", "function.injective.surjective_comp_right'", "function.factors_through", "function.injective.eq_iff", "function.surjective.forall", "function.extend", "function.injective.extend_apply", "function.surjective.exists", "function.update_ne_self_iff", "function.bijective.comp_right", "function.surjective.of_comp", "eq_rec_on_bijective", "function.bicompl", "function.update", "function.injective.ne_iff'", "function.surj_inv", "function.factors_through.extend_comp", "function.partial_inv", "function.surjective.exists₂", "is_symm_op.flip_eq", "function.injective2.left", "function.eq_update_self_iff", "eq_mp_bijective", "function.hfunext", "function.eval_apply", "function.injective.factors_through", "function.update_comp_eq_of_injective'", "set.separates_points", "function.surjective.comp_left", "function.update_comp_eq_of_forall_ne'", "function.id_def", "function.injective.dite", "function.forall_update_iff", "function.comp_update", "function.injective2.right", "function.injective.apply_extend", "bool.involutive_bnot", "function.injective_of_subsingleton", "function.const_injective", "function.factors_through.apply_extend", "function.injective2.uncurry", "function.update_comp_eq_of_forall_ne", "function.injective.ne_iff", "function.apply_update₂", "function.factors_through.extend_apply", "function.factors_through_iff", "function.comp_apply", "function.surjective_of_right_cancellable_Prop", "function.injective.of_comp_iff'", "function.update_comm", "function.right_inverse.injective", "function.surjective.forall₃", "function.sometimes_eq", "function.surjective.right_cancellable", "function.injective2.eq_iff", "function.uncurry_apply_pair", "function.injective.of_comp_iff", "function.curry_apply", "function.extend_apply'", "function.extend_comp", "function.update_apply", "function.comp_const", "function.has_uncurry", "function.surjective.of_comp_iff", "function.surjective_eval", "function.right_inverse.comp_eq_id"], "mathlib/src/logic/function/iterate.lean": ["function.surjective.iterate", "function.left_inverse.iterate", "function.semiconj.iterate_left", "function.commute.iterate_left", "function.commute.iterate_eq_of_map_eq", "function.iterate_comm", "function.commute.iterate_self", "function.commute.comp_iterate", "function.iterate_one", "function.iterate_mul", "function.iterate_fixed", "function.right_inverse.iterate", "function.iterate_id", "function.commute.iterate_iterate", "function.iterate_succ_apply'", "function.iterate_zero_apply", "function.bijective.iterate", "list.foldr_const", "function.semiconj₂.iterate", "function.iterate_add", "function.iterate_add_apply", "function.commute.iterate_iterate_self", "function.injective.iterate", "function.iterate_commute", "function.iterate_pred_comp_of_pos", "function.iterate_succ'", "function.commute.self_iterate", "function.commute.iterate_right", "function.iterate.rec", "function.iterate.rec_zero", "function.iterate_succ_apply", "function.iterate_succ", "function.comp_iterate_pred_of_pos", "function.semiconj.iterate_right", "function.iterate_zero", "list.foldl_const"], "mathlib/src/logic/equiv/set.lean": ["equiv.sigma_preimage_equiv_symm_apply_fst", "equiv.set.congr_symm_apply", "equiv.of_preimage_equiv_apply", "equiv.set.univ_pi_symm_apply_coe", "equiv.image_apply_coe", "equiv.set.image_apply", "equiv.set.of_eq_apply", "equiv.set.of_eq_symm_apply", "equiv.set.univ_pi_apply_coe", "equiv.image_symm_apply_coe", "equiv.sigma_preimage_equiv_apply", "equiv.set.univ_symm_apply", "equiv.set_congr_apply", "equiv.of_preimage_equiv_symm_apply", "equiv.set.range_splitting_image_equiv_apply_coe_coe", "equiv.of_injective_apply", "equiv.set.univ_apply", "equiv.of_left_inverse_apply_coe", "equiv.of_left_inverse_symm_apply", "equiv.set.range_splitting_image_equiv_symm_apply_coe", "equiv.sigma_preimage_equiv_symm_apply_snd_coe", "equiv.set.congr_apply"], "mathlib/src/logic/equiv/defs.lean": ["equiv.coe_fn_injective", "equiv.conj_comp", "equiv.refl_trans", "equiv.perm.ext", "equiv.surjective_comp", "equiv.equiv_of_unique", "equiv.Pi_subsingleton_symm_apply", "equiv.right_inverse_symm", "equiv.refl", "equiv.equiv_of_is_empty", "quotient.congr_mk", "equiv.fun_unique", "equiv.nonempty_congr", "equiv.coe_inj", "equiv.sigma_equiv_prod_apply", "equiv.trans_assoc", "equiv.fun_unique_symm_apply", "equiv.forall_congr_left", "equiv.cast_apply", "equiv.arrow_congr", "equiv.coe_trans", "equiv.sigma_equiv_prod", "equiv.eq_symm_comp", "equiv.forall₂_congr", "equiv.forall₃_congr", "equiv.exists_congr_left", "equiv.psigma_equiv_sigma_symm_apply", "equiv.sigma_congr_right_apply", "equiv.ulift_symm_apply", "equiv.forall_congr'", "equiv.injective_comp", "equiv.exists_unique_congr_left'", "equiv.perm.congr_fun", "equiv.cast_symm", "equiv.symm_apply_apply", "equiv.nonempty", "quot.congr_right", "quot.congr_mk", "equiv.symm_comp_self", "equiv.inhabited", "equiv.Prop_equiv_bool", "equiv.conj_symm", "equiv.eq_comp_symm", "equiv.ext", "equiv.ext_iff", "equiv.equiv_congr", "equiv.conj", "equiv.comp_symm_eq", "equiv.self_comp_symm", "equiv.psigma_equiv_sigma_apply", "equiv.sigma_congr", "equiv.exists_unique_congr", "equiv.congr_arg", "equiv", "equiv.plift_apply", "equiv.fun_unique_apply", "equiv.left_inverse_symm", "equiv.ulift_apply", "equiv.sigma_congr_left", "equiv.psigma_equiv_sigma", "equiv.trans_apply", "equiv.ulift", "equiv.perm.coe_subsingleton", "equiv.cast", "equiv.of_iff", "equiv.Pi_subsingleton", "equiv.conj_trans", "equiv.coe_fn_symm_mk", "equiv.decidable_eq", "equiv.symm_trans_self", "quotient.congr_right", "equiv.subsingleton.symm", "equiv.sigma_congr_left'", "equiv.perm.subsingleton_eq_refl", "equiv.symm_comp_eq", "equiv.Pi_subsingleton_apply", "equiv.congr_fun", "equiv.sigma_congr_left_apply", "equiv.arrow_congr'_apply", "equiv.apply_eq_iff_eq_symm_apply", "equiv.comp_injective", "equiv.arrow_congr'", "equiv.psigma_equiv_sigma_plift_symm_apply", "equiv.psigma_congr_right_apply", "equiv.cast_trans", "equiv.forall_congr_left'", "equiv.true_arrow_equiv", "equiv.apply_symm_apply", "equiv.symm_trans_apply", "equiv.forall_congr", "equiv.perm_congr", "equiv.symm_apply_eq", "quotient.congr", "quot.congr", "equiv.comp_bijective", "equiv.forall₂_congr'", "equiv.sigma_equiv_prod_of_equiv", "equiv.eq_symm_apply", "equiv.forall₃_congr'", "equiv.perm.ext_iff", "equiv.comp_surjective", "quot.congr_left", "equiv.perm.sigma_congr_right", "equiv.psigma_equiv_sigma_plift_apply", "equiv.exists_unique_congr_left", "equiv.perm.congr_arg", "equiv.symm", "equiv.conj_refl", "equiv.cast_eq_iff_heq", "equiv.refl_symm", "equiv.refl_apply", "equiv.equiv_empty", "equiv.apply_eq_iff_eq", "equiv.trans", "equiv.symm_symm_apply", "equiv.psigma_congr_right", "equiv.unique", "equiv.plift_symm_apply", "equiv.sigma_equiv_prod_symm_apply", "equiv.subsingleton_congr", "equiv.symm_symm", "equiv.conj_apply", "equiv.coe_fn_mk", "equiv.sigma_assoc", "equiv.perm", "equiv.plift", "equiv.coe_refl", "equiv.punit_arrow_equiv", "equiv.trans_refl", "equiv.self_trans_symm", "equiv.simps.symm_apply", "equiv.cast_refl", "equiv.bijective_comp", "equiv.psigma_equiv_subtype"], "mathlib/src/logic/equiv/fin.lean": ["equiv.pi_fin_succ_apply", "fin_two_arrow_equiv_symm_apply", "equiv.pi_fin_succ_above_equiv_symm_apply", "fin_prod_fin_equiv_symm_apply", "equiv.pi_fin_succ_symm_apply", "fin.cast_le_order_iso_symm_apply", "pi_fin_two_equiv_symm_apply", "fin_prod_fin_equiv_apply_val", "prod_equiv_pi_fin_two_apply", "prod_equiv_pi_fin_two_symm_apply", "pi_fin_two_equiv_apply", "fin.cast_le_order_iso_apply", "fin_two_arrow_equiv_apply", "equiv.pi_fin_succ_above_equiv_apply"], "mathlib/src/logic/equiv/local_equiv.lean": ["local_equiv.piecewise_symm_apply", "local_equiv.pi_target", "local_equiv.copy_apply", "equiv.to_local_equiv_target", "equiv.to_local_equiv_symm_apply", "set.bij_on.to_local_equiv_apply", "local_equiv.is_image.restr_target", "local_equiv.is_image.restr_source", "local_equiv.pi_symm_apply", "local_equiv.disjoint_union_symm_apply", "local_equiv.trans_equiv_apply", "local_equiv.is_image.of_symm_preimage_eq", "local_equiv.is_image.restr_symm_apply", "local_equiv.pi_apply", "local_equiv.copy_target", "local_equiv.is_image.of_preimage_eq", "local_equiv.trans_equiv_symm_apply", "local_equiv.is_image.preimage_eq", "local_equiv.pi_source", "set.bij_on.to_local_equiv_symm_apply", "local_equiv.copy_source", "equiv.trans_local_equiv_symm_apply", "equiv.trans_local_equiv_target", "local_equiv.piecewise_target", "equiv.trans_local_equiv_source", "local_equiv.disjoint_union_source", "set.bij_on.to_local_equiv_source", "set.bij_on.to_local_equiv_target", "local_equiv.copy_symm_apply", "local_equiv.trans_equiv_target", "equiv.to_local_equiv_source", "equiv.trans_local_equiv_apply", "local_equiv.is_image.symm_preimage_eq", "local_equiv.piecewise_source", "local_equiv.disjoint_union_target", "local_equiv.trans_equiv_source", "equiv.to_local_equiv_apply", "local_equiv.piecewise_apply", "local_equiv.is_image.restr_apply", "local_equiv.disjoint_union_apply"], "mathlib/src/logic/equiv/nat.lean": ["equiv.bool_prod_nat_equiv_nat_symm_apply", "equiv.bool_prod_nat_equiv_nat_apply", "equiv.nat_sum_nat_equiv_nat_symm_apply"], "mathlib/src/logic/equiv/basic.lean": ["equiv.subtype_preimage_apply", "equiv.sigma_sum_distrib_apply", "equiv.pprod_congr_apply", "equiv.subtype_subtype_equiv_subtype_inter_apply_coe", "equiv.prod_assoc_symm_apply", "equiv.pi_split_at_apply", "equiv.Pi_congr_left'_apply", "equiv.prod_shear_symm_apply", "equiv.bool_prod_equiv_sum_symm_apply", "equiv.of_fiber_equiv_symm_apply", "equiv.pprod_equiv_prod_plift_symm_apply", "equiv.bool_prod_equiv_sum_apply", "equiv.subtype_equiv_right_symm_apply_coe", "equiv.of_bijective_apply", "equiv.subtype_subtype_equiv_subtype_symm_apply_coe_coe", "equiv.sigma_fiber_equiv_symm_apply_snd_coe", "equiv.prod_punit_symm_apply", "equiv.subtype_subtype_equiv_subtype_exists_symm_apply_coe_coe", "equiv.curry_symm_apply", "equiv.subtype_subtype_equiv_subtype_inter_symm_apply_coe_coe", "equiv.punit_prod_apply", "equiv.subtype_univ_equiv_apply", "equiv.option_is_some_equiv_symm_apply_coe", "equiv.sigma_fiber_equiv_symm_apply_fst", "equiv.sum_empty_symm_apply", "equiv.pprod_equiv_prod_plift_apply", "equiv.Pi_comm_apply", "equiv.Pi_congr_left'_symm_apply", "equiv.pprod_equiv_prod_apply", "equiv.bool_arrow_equiv_prod_apply", "equiv.sigma_sum_distrib_symm_apply", "equiv.fun_split_at_apply", "equiv.of_fiber_equiv_apply", "equiv.prod_congr_apply", "equiv.pprod_equiv_prod_symm_apply", "equiv.fun_split_at_symm_apply", "equiv.subtype_univ_equiv_symm_apply", "equiv.prod_shear_apply", "equiv.prod_pprod_apply", "equiv.empty_sum_symm_apply", "equiv.curry_apply", "equiv.pi_split_at_symm_apply", "equiv.subtype_preimage_symm_apply_coe", "equiv.punit_prod_symm_apply", "equiv.option_is_some_equiv_apply", "equiv.pprod_prod_symm_apply", "equiv.bool_arrow_equiv_prod_symm_apply", "equiv.prod_assoc_apply", "equiv.pi_option_equiv_prod_apply", "equiv.subtype_subtype_equiv_subtype_apply_coe", "equiv.prod_punit_apply", "equiv.pi_equiv_pi_subtype_prod_apply", "equiv.sum_comm_apply", "equiv.pprod_prod_apply", "equiv.subtype_equiv_right_apply_coe", "equiv.pi_option_equiv_prod_symm_apply", "equiv.sigma_fiber_equiv_apply", "equiv.sum_congr_apply", "equiv.pi_equiv_pi_subtype_prod_symm_apply", "equiv.subtype_subtype_equiv_subtype_exists_apply_coe", "equiv.prod_pprod_symm_apply"], "mathlib/src/logic/equiv/option.lean": ["equiv.option_congr_apply"], "mathlib/src/topology/basic.lean": ["Lim'"], "mathlib/src/algebra/opposites.lean": ["add_opposite.unop_surjective", "mul_opposite.op_one", "mul_opposite", "add_opposite.op_equiv", "add_opposite.op_surjective", "mul_opposite.op_surjective", "mul_opposite.op_comp_unop", "add_opposite.op_unop", "add_opposite.unop_neg", "mul_opposite.op_eq_one_iff", "mul_opposite.unop_bijective", "add_opposite.unop_zero", "mul_opposite.op_mul", "add_opposite.unop_comp_op", "mul_opposite.unop_eq_one_iff", "mul_opposite.unop_comp_op", "mul_opposite.unop", "add_opposite.op_equiv_apply", "add_opposite.op_inj", "mul_opposite.op_injective", "add_opposite.unop", "add_opposite.op_injective", "mul_opposite.unop_inj", "mul_opposite.op_equiv_symm_apply", "mul_opposite.unop_surjective", "add_opposite.op_eq_zero_iff", "add_opposite.unop_eq_zero_iff", "mul_opposite.op_smul", "add_opposite.op_zero", "mul_opposite.unop_one", "mul_opposite.op_unop", "mul_opposite.op_inv", "add_opposite.unop_vadd", "mul_opposite.op_inj", "add_opposite.op_equiv_symm_apply", "add_opposite.op_vadd", "add_opposite.unop_inj", "add_opposite.unop_add", "mul_opposite.op_equiv_apply", "add_opposite.op_add", "mul_opposite.unop_mul", "mul_opposite.unop_smul", "add_opposite.op_comp_unop", "add_opposite", "add_opposite.op_neg", "add_opposite.op", "mul_opposite.op_bijective", "mul_opposite.op_equiv", "mul_opposite.unop_op", "add_opposite.unop_op", "add_opposite.op_bijective", "add_opposite.unop_bijective"], "mathlib/src/algebra/covariant_and_contravariant.lean": ["covariant_class", "add_group.covariant_swap_iff_contravariant_swap", "contravariant", "act_rel_of_rel_of_act_rel", "group.covariant_swap_iff_contravariant_swap", "covariant.monotone_of_const", "monotone.covariant_of_const", "monotone.covariant_of_const'", "act_rel_act_of_rel", "contravariant_class", "rel_act_of_act_rel_act_of_rel_act", "rel_act_of_rel_of_rel_act", "covariant_le_iff_contravariant_lt", "contravariant_flip_mul_iff", "covariant_flip_add_iff", "rel_of_act_rel_act", "add_group.covariant_iff_contravariant", "contravariant_flip_add_iff", "covariant.flip", "covariant_flip_mul_iff", "group.covariant_iff_contravariant", "rel_iff_cov", "contravariant_lt_of_contravariant_le", "antitone.covariant_of_const", "act_rel_act_of_rel_of_rel", "covariant_le_of_covariant_lt", "antitone.covariant_of_const'", "covariant_lt_iff_contravariant_le", "contravariant.flip", "covariant", "act_rel_of_act_rel_of_rel_act_rel"], "mathlib/src/algebra/graded_monoid.lean": ["has_mul.ghas_mul_mul", "has_one.ghas_one_one", "monoid.gmonoid_gnpow"], "mathlib/src/algebra/smul_with_zero.lean": ["smul_monoid_with_zero_hom_apply"], "mathlib/src/algebra/ne_zero.lean": ["two_ne_zero", "two_ne_zero'", "ne_zero.ne", "ne_zero.of_pos", "four_ne_zero'", "zero_ne_one'", "ne_zero", "four_ne_zero", "ne_zero.ne'", "one_ne_zero", "one_ne_zero'", "three_ne_zero", "ne_zero_of_eq_one", "three_ne_zero'", "ne_zero.trans", "zero_ne_one"], "mathlib/src/algebra/invertible.lean": ["invertible_equiv_of_left_inverse_symm_apply", "invertible_equiv_of_left_inverse_apply", "invertible.of_left_inverse_inv_of", "coe_unit_of_invertible", "coe_inv_unit_of_invertible"], "mathlib/src/algebra/quandle.lean": ["shelf_hom.ext_iff", "rack.self_distrib", "shelf_hom.ext"], "mathlib/src/algebra/parity.lean": ["is_square.exists_sq", "is_square_of_exists_sq", "even.neg", "is_square.inv", "even.exists_two_nsmul", "odd.exists_bit1", "even.exists_bit0", "even_of_exists_two_nsmul"], "mathlib/src/algebra/free_monoid/basic.lean": ["free_monoid.prod_aux", "free_add_monoid.sum_aux_eq", "free_monoid.prod_aux_eq", "free_add_monoid.sum_aux"], "mathlib/src/algebra/ring/pi.lean": ["ring_hom.comp_left_apply", "pi.eval_non_unital_ring_hom_to_fun", "pi.const_non_unital_ring_hom_to_fun", "pi.const_ring_hom_apply", "pi.ring_hom_apply", "pi.eval_ring_hom_apply", "non_unital_ring_hom.comp_left_to_fun", "pi.non_unital_ring_hom_to_fun"], "mathlib/src/algebra/ring/defs.lean": ["mul_add", "one_sub_mul", "sub_one_mul", "mul_sub", "mul_one_sub", "add_mul", "neg_one_mul", "mul_neg_one", "mul_sub_one", "sub_mul", "neg_eq_neg_one_mul", "one_add_one_eq_two"], "mathlib/src/algebra/ring/fin.lean": ["ring_equiv.pi_fin_two_symm_apply", "ring_equiv.pi_fin_two_apply"], "mathlib/src/algebra/ring/prod.lean": ["ring_equiv.prod_zero_ring_symm_apply", "ring_equiv.zero_ring_prod_symm_apply", "ring_equiv.prod_zero_ring_apply", "ring_equiv.zero_ring_prod_apply"], "mathlib/src/algebra/ring/basic.lean": ["add_hom.mul_right_apply", "add_hom.mul_left_apply"], "mathlib/src/algebra/ring/aut.lean": ["mul_semiring_action.to_ring_aut_apply"], "mathlib/src/algebra/ring/opposite.lean": ["ring_hom.op_apply_apply", "ring_hom.op_symm_apply_apply", "non_unital_ring_hom.to_opposite_to_fun", "non_unital_ring_hom.op_symm_apply_to_fun", "ring_hom.from_opposite_apply", "non_unital_ring_hom.from_opposite_to_fun", "ring_hom.to_opposite_apply", "non_unital_ring_hom.op_apply_to_fun"], "mathlib/src/algebra/ring/equiv.lean": ["ring_equiv.to_add_equiv", "ring_equiv.of_hom_inv'_apply", "ring_equiv.op_symm_apply_symm_apply", "ring_equiv.of_hom_inv_symm_apply", "ring_equiv.op_apply_symm_apply", "ring_equiv.of_hom_inv'_symm_apply", "ring_equiv.op_apply_apply", "ring_equiv.to_equiv", "ring_equiv.to_mul_equiv", "ring_equiv.of_hom_inv_apply", "ring_equiv.Pi_congr_right_apply", "ring_equiv.op_symm_apply_apply"], "mathlib/src/algebra/ring/add_aut.lean": ["add_aut.mul_left_apply_apply", "add_aut.mul_left_apply_symm_apply"], "mathlib/src/algebra/module/hom.lean": ["add_monoid_hom.coe_smul"], "mathlib/src/algebra/module/basic.lean": ["module.ext_iff", "module.to_add_monoid_End_apply_apply", "module.ext"], "mathlib/src/algebra/module/equiv.lean": ["linear_equiv.to_add_equiv", "distrib_mul_action.to_module_aut_apply", "ring_equiv.to_semilinear_equiv_symm_apply", "linear_equiv.of_subsingleton_symm_apply", "module.comp_hom.to_linear_equiv_apply", "linear_equiv.coe_mk", "distrib_mul_action.to_linear_equiv_symm_apply", "distrib_mul_action.to_linear_equiv_apply", "linear_equiv.to_linear_map_eq_coe", "ring_equiv.to_semilinear_equiv_apply", "linear_equiv.to_linear_map", "linear_equiv.restrict_scalars_apply", "module.comp_hom.to_linear_equiv_symm_apply", "linear_equiv.automorphism_group.to_linear_map_monoid_hom_apply", "linear_equiv.of_subsingleton_apply", "linear_equiv.restrict_scalars_symm_apply"], "mathlib/src/algebra/module/linear_map.lean": ["module.comp_hom.to_linear_map_apply", "module.module_End_self_apply", "module.to_module_End_apply", "module.module_End_self_op_apply", "module.module_End_self_symm_apply", "module.module_End_self_op_symm_apply", "ring_hom.to_semilinear_map_apply", "distrib_mul_action.to_linear_map_apply", "distrib_mul_action.to_module_End_apply", "linear_map.to_add_hom"], "mathlib/src/algebra/module/submodule/basic.lean": ["submodule.restrict_scalars_embedding_apply", "submodule.restrict_scalars_equiv_apply", "submodule.restrict_scalars_equiv_symm_apply", "submodule.to_sub_mul_action", "submodule.to_add_submonoid"], "mathlib/src/algebra/group_power/lemmas.lean": ["int.nat_abs_pow_two", "add_units.coe_of_nsmul_eq_zero", "units.coe_of_pow_eq_one", "int.le_self_pow_two", "add_units.of_nsmul", "int.abs_le_self_pow_two", "add_units.coe_neg_of_nsmul_eq_zero", "units.coe_inv_of_pow_eq_one"], "mathlib/src/algebra/group_power/basic.lean": ["nsmul_add_monoid_hom_apply", "pow_one", "nsmul_zero", "add_nsmul", "zsmul_add_group_hom_apply", "has_dvd.dvd.pow", "sq", "one_nsmul", "zpow_group_hom_apply", "pow_add", "one_pow", "pow_monoid_hom_apply"], "mathlib/src/algebra/group_power/identities.lean": ["sum_four_sq_mul_sum_four_sq", "sum_eight_sq_mul_sum_eight_sq", "sq_add_sq_mul_sq_add_sq", "pow_four_add_four_mul_pow_four'", "pow_four_add_four_mul_pow_four", "sq_add_mul_sq_mul_sq_add_mul_sq"], "mathlib/src/algebra/group_power/order.lean": ["pow_two_nonneg", "le_of_pow_le_pow'", "monotone.pow_right", "pow_two_pos_of_ne_zero", "le_of_nsmul_le_nsmul", "strict_mono.pow_right'", "min_le_of_add_le_two_nsmul", "min_lt_max_of_mul_lt_mul", "pow_strict_mono_right", "lt_of_nsmul_lt_nsmul", "lt_max_of_two_nsmul_lt_add", "strict_mono.nsmul_left", "min_lt_max_of_add_lt_add", "min_lt_of_add_lt_two_nsmul", "nsmul_mono_left", "lt_of_pow_lt_pow'", "left.nsmul_neg_iff", "le_max_of_two_nsmul_le_add", "min_le_of_mul_le_sq", "min_lt_of_mul_lt_sq", "le_max_of_sq_le_mul", "monotone.nsmul_left", "two_mul_le_add_pow_two", "lt_max_of_sq_lt_mul", "pow_strict_mono_right'", "pow_mono_right", "nsmul_strict_mono_left"], "mathlib/src/algebra/group_power/ring.lean": ["neg_one_pow_eq_or", "neg_one_pow_two", "sub_pow_two", "min_pow_dvd_add", "units.eq_or_eq_neg_of_sq_eq_sq", "sub_sq'", "pow_ne_zero_iff", "add_pow_two", "neg_sq", "pow_eq_zero", "ring.inverse_pow", "mul_neg_one_pow_eq_zero_iff", "pow_eq_zero_of_le", "neg_pow_two", "eq_or_eq_neg_of_sq_eq_sq", "zero_pow_eq", "pow_two_sub_pow_two", "pow_eq_zero_iff", "neg_one_sq", "sq_eq_sq_iff_eq_or_eq_neg", "pow_eq_zero_iff'", "pow_dvd_pow_iff", "commute.sq_sub_sq", "zero_pow_eq_zero", "sq_sub_sq", "pow_monoid_with_zero_hom", "sub_sq", "units.sq_eq_sq_iff_eq_or_eq_neg", "neg_one_pow_mul_eq_zero_iff", "zero_pow", "neg_pow", "zero_pow'"], "mathlib/src/algebra/order/smul.lean": ["order_iso.smul_left_symm_apply", "order_iso.smul_left_apply"], "mathlib/src/algebra/order/with_zero.lean": ["order_iso.mul_right₀'_to_equiv", "order_iso.mul_right₀'_apply", "order_iso.mul_left₀'_to_equiv", "order_iso.mul_left₀'_apply"], "mathlib/src/algebra/order/archimedean.lean": ["exists_unique_sub_zsmul_mem_Ico", "exists_unique_sub_zsmul_mem_Ioc"], "mathlib/src/algebra/order/absolute_value.lean": ["is_absolute_value.to_absolute_value_to_mul_hom_apply", "is_absolute_value.to_absolute_value_apply", "absolute_value.abs_to_mul_hom_apply", "absolute_value.abs_apply"], "mathlib/src/algebra/order/zero_le_one.lean": ["zero_le_one'", "zero_le_one", "zero_lt_one'", "zero_lt_one", "one_pos"], "mathlib/src/algebra/order/ring/defs.lean": ["one_lt_mul"], "mathlib/src/algebra/order/ring/cone.lean": ["ring.positive_cone.to_positive_cone", "ring.total_positive_cone.to_total_positive_cone"], "mathlib/src/algebra/order/ring/lemmas.lean": ["left.mul_pos", "zero_lt_mul_left", "mul_pos_mono.to_mul_pos_reflect_lt", "mul_pos_strict_mono", "lt_mul_of_lt_of_one_lt_of_pos", "mul_lt_mul_left", "mul_lt_of_lt_one_right", "mul_nonneg", "pos_mul_strict_mono", "mul_eq_mul_iff_eq_and_eq_of_pos", "neg_iff_neg_of_mul_pos", "mul_le_iff_le_one_left", "mul_le_of_le_one_of_le'", "lt_of_mul_lt_mul_of_nonneg_left", "zero_lt_mul_right", "right.mul_nonneg", "mul_eq_mul_iff_eq_and_eq_of_pos'", "right.one_lt_mul_of_le_of_lt_of_nonneg", "left.one_lt_mul_of_le_of_lt_of_pos", "right.neg_of_mul_neg_right", "lt_mul_of_lt_of_one_le'", "le_mul_of_one_le_left", "right.one_lt_mul_of_lt_of_lt", "lt_mul_of_lt_mul_of_nonneg_right", "lt_of_mul_lt_mul_of_nonneg_right", "mul_lt_mul_of_pos_left", "mul_lt_of_lt_one_of_le'", "mul_le_iff_le_one_right", "lt_mul_of_le_of_one_lt'", "lt_mul_of_one_lt_left", "le_of_mul_le_mul_left", "le_of_mul_le_mul_of_pos_left", "mul_le_mul_right", "right.mul_le_one_of_le_of_le", "mul_le_mul_of_le_of_le", "mul_lt_of_lt_one_left", "mul_neg_of_pos_of_neg", "mul_lt_of_mul_lt_of_nonneg_left", "mul_le_mul_of_nonneg_left", "mul_neg_of_neg_of_pos", "mul_lt_iff_lt_one_right", "left.mul_nonneg", "pos_mul_mono_rev.to_pos_mul_strict_mono", "pos_mul_mono.to_pos_mul_reflect_lt", "mul_nonpos_of_nonneg_of_nonpos", "lt_mul_iff_one_lt_left", "lt_of_mul_lt_mul_right", "mul_pos_mono_rev.to_mul_pos_strict_mono", "mul_left_cancel_iff_of_pos", "le_mul_of_le_mul_of_nonneg_right", "mul_nonpos_of_nonpos_of_nonneg", "mul_lt_of_le_of_lt_one_of_pos", "pos_mul_mono_iff_pos_mul_reflect_lt", "le_mul_of_one_le_of_le_of_nonneg", "mul_le_of_mul_le_of_nonneg_left", "mul_pos", "left.mul_lt_of_le_of_lt_one_of_pos", "mul_right_cancel_iff_of_pos", "lt_mul_of_le_of_one_lt_of_pos", "lt_mul_of_one_lt_of_lt_of_pos", "mul_pos_mono", "mul_le_mul_left", "left.lt_mul_of_lt_of_one_le_of_nonneg", "mul_lt_mul_of_pos_of_pos", "le_mul_of_one_le_right", "mul_le_of_le_of_le_one'", "left.mul_le_one_of_le_of_le", "lt_mul_of_lt_mul_of_nonneg_left", "mul_lt_of_lt_one_of_lt_of_pos", "lt_of_lt_mul_of_le_one_of_nonneg_left", "pos_mul_mono_rev", "mul_lt_mul_of_le_of_le'", "mul_lt_mul_right", "le_of_mul_le_mul_of_pos_right", "le_of_le_mul_of_le_one_of_nonneg_left", "lt_mul_of_one_lt_of_le_of_pos", "right.mul_lt_one_of_lt_of_le_of_pos", "mul_lt_mul_of_pos_right", "mul_lt_of_le_of_lt_one'", "mul_le_mul_of_nonneg_right", "pos_mul_strict_mono_iff_pos_mul_mono_rev", "right.one_le_mul_of_le_of_le", "exists_square_le'", "right.mul_lt_one_of_le_of_lt_of_nonneg", "mul_lt_of_lt_of_lt_one_of_pos", "mul_pos_strict_mono_iff_mul_pos_mono_rev", "lt_mul_of_lt_of_one_le_of_nonneg", "mul_lt_mul_of_lt_of_lt'", "mul_lt_of_lt_of_le_one_of_nonneg", "mul_le_of_le_of_le_one_of_nonneg", "left.mul_lt_of_lt_of_le_one_of_nonneg", "mul_le_of_mul_le_of_nonneg_right", "right.neg_of_mul_neg_left", "lt_mul_of_one_lt_right", "pos_mul_mono", "right.one_lt_mul_of_lt_of_le_of_pos", "neg_of_mul_pos_right", "mul_le_of_le_one_left", "lt_mul_of_one_le_of_lt_of_nonneg", "mul_lt_of_lt_of_le_one'", "le_of_le_mul_of_le_one_of_nonneg_right", "lt_mul_of_one_lt_of_lt_of_nonneg", "left.neg_of_mul_neg_left", "le_mul_iff_one_le_left", "mul_lt_mul_of_le_of_lt'", "mul_lt_of_le_one_of_lt_of_nonneg", "le_of_mul_le_of_one_le_of_nonneg_left", "le_mul_iff_one_le_right", "mul_pos_mono_iff_mul_pos_reflect_lt", "mul_lt_of_lt_one_of_le_of_pos", "pos_and_pos_or_neg_and_neg_of_mul_pos", "right.mul_pos", "lt_of_mul_lt_mul_left", "mul_le_mul", "pos_of_mul_pos_right", "mul_lt_mul_of_pos_of_nonneg", "mul_le_of_le_one_of_le_of_nonneg", "le_mul_of_le_of_one_le_of_nonneg", "le_mul_of_le_mul_of_nonneg_left", "mul_lt_mul_of_nonneg_of_pos", "le_of_mul_le_mul_right", "neg_of_mul_pos_left", "mul_lt_of_mul_lt_of_nonneg_right", "mul_le_of_le_one_right", "le_mul_of_le_of_one_le'", "left.one_le_mul_of_le_of_le", "mul_self_le_mul_self", "lt_of_mul_lt_of_one_le_of_nonneg_left", "mul_pos_mono_rev", "pos_iff_pos_of_mul_pos", "lt_mul_iff_one_lt_right", "le_of_mul_le_of_one_le_nonneg_right", "left.neg_of_mul_neg_right", "lt_of_lt_mul_of_le_one_of_nonneg_right", "mul_lt_of_le_one_of_lt'", "pos_of_mul_pos_left", "mul_lt_iff_lt_one_left"], "mathlib/src/algebra/order/ring/with_top.lean": ["ring_hom.with_top_map_apply", "monoid_with_zero_hom.with_top_map_apply"], "mathlib/src/algebra/order/sub/defs.lean": ["tsub_nonpos_of_le"], "mathlib/src/algebra/order/sub/canonical.lean": ["tsub_eq_zero_of_le"], "mathlib/src/algebra/order/monoid/units.lean": ["add_units.order_embedding_coe_apply", "units.order_embedding_coe_apply"], "mathlib/src/algebra/order/monoid/lemmas.lean": ["lt_of_add_lt_of_nonneg_left", "mul_right_cancel''", "mul_le_of_mul_le_left", "lt_mul_of_one_lt_left'", "add_lt_of_lt_of_nonpos", "add_lt_of_neg_of_lt", "lt_add_of_nonneg_of_lt", "lt_of_lt_add_of_nonpos_right", "mul_lt_of_lt_of_le_one", "lt_add_of_lt_add_left", "le_one_of_mul_le_left", "add_lt_of_add_lt_left", "cmp_add_left", "le_of_mul_le_mul_left'", "lt_of_add_lt_of_nonneg_right", "le_of_add_le_of_nonneg_left", "add_lt_of_neg_of_le", "add_eq_add_iff_eq_and_eq", "lt_mul_of_lt_mul_right", "add_eq_zero_iff'", "le_add_of_le_add_right", "lt_add_of_le_of_pos", "le_mul_of_one_le_of_le", "mul_le_of_mul_le_right", "add_le_of_add_le_right", "add_lt_of_lt_of_neg'", "mul_le_mul_iff_left", "one_lt_mul_of_lt_of_le'", "mul_lt_one_of_le_of_lt", "le_mul_of_one_le_left'", "add_le_iff_nonpos_left", "le_add_of_nonneg_left", "mul_le_of_le_one_right'", "mul_lt_one'", "nonpos_of_add_le_left", "lt_add_of_lt_of_pos'", "lt_mul_iff_one_lt_left'", "add_pos", "add_le_add_iff_left", "eq_zero_of_add_nonpos_right", "lt_mul_of_lt_of_one_le", "le_of_le_add_of_nonpos_right", "lt_of_mul_lt_of_one_le_left", "eq_zero_of_add_nonpos_left", "mul_lt_of_lt_one_of_le", "lt_one_of_mul_lt_right", "add_pos_of_nonneg_of_pos", "add_le_add_right", "lt_add_of_pos_right", "mul_le_of_le_one_left'", "mul_lt_of_le_one_of_lt", "mul_le_mul_iff_right", "pos_of_lt_add_right", "mul_lt_one", "lt_of_mul_lt_mul_right'", "mul_eq_one_iff'", "lt_mul_of_one_lt_of_lt", "lt_add_of_pos_of_lt", "lt_add_of_pos_left", "le_add_iff_nonneg_right", "lt_mul_of_one_lt_right'", "cmp_mul_left'", "le_mul_of_one_le_right'", "add_neg'", "add_pos'", "add_lt_of_add_lt_right", "add_lt_of_nonpos_of_lt", "lt_add_of_pos_of_lt'", "le_of_mul_le_of_one_le_right", "le_of_mul_le_of_one_le_left", "mul_le_mul_iff_of_ge", "mul_lt_mul_of_lt_of_le", "add_lt_add_iff_left", "lt_one_of_mul_lt_left", "min_le_max_of_add_le_add", "one_le_of_le_mul_left", "add_le_iff_nonpos_right", "mul_lt_of_lt_one_of_lt", "add_neg_of_nonpos_of_neg", "cmp_add_right", "one_lt_mul'", "lt_add_of_lt_add_right", "le_add_of_le_of_nonneg", "add_le_add_left", "lt_add_iff_pos_right", "mul_lt_one_of_lt_of_le", "add_lt_of_neg_right", "one_le_mul", "le_mul_of_le_mul_left", "nonpos_of_add_le_right", "mul_lt_of_le_of_lt_one", "le_of_add_le_of_nonneg_right", "le_add_of_nonneg_right", "mul_le_mul_right'", "mul_lt_iff_lt_one_right'", "le_of_add_le_add_right", "add_lt_add_of_le_of_lt", "add_le_of_nonpos_right", "lt_of_mul_lt_of_one_le_right", "le_of_mul_le_mul_right'", "le_mul_iff_one_le_left'", "neg_of_add_lt_right", "mul_lt_mul_iff_left", "add_le_add_iff_of_ge", "mul_le_mul'", "mul_le_mul_left'", "one_lt_of_lt_mul_right", "eq_one_of_one_le_mul_left", "add_lt_iff_neg_left", "le_of_add_le_add_left", "mul_lt_mul_of_le_of_lt", "eq_one_of_mul_le_one_right", "add_lt_add_left", "add_neg", "min_le_max_of_mul_le_mul", "exists_square_le", "le_of_le_mul_of_le_one_left", "lt_add_of_pos_of_le", "add_lt_add_right", "le_of_le_add_of_nonpos_left", "lt_add_of_lt_of_pos", "eq_zero_of_add_nonneg_right", "cmp_mul_right'", "mul_lt_mul_iff_right", "mul_lt_iff_lt_one_left'", "add_lt_iff_neg_right", "le_mul_of_le_mul_right", "mul_lt_of_mul_lt_right", "add_left_cancel''", "lt_of_lt_mul_of_le_one_right", "lt_mul_iff_one_lt_right'", "add_right_cancel''", "add_lt_of_lt_of_neg", "le_add_of_nonneg_of_le", "lt_mul_of_one_lt_of_lt'", "mul_le_of_le_of_le_one", "mul_le_mul_three", "mul_le_iff_le_one_left'", "lt_mul_of_one_le_of_lt", "mul_lt_mul_of_lt_of_lt", "pos_of_lt_add_left", "lt_add_iff_pos_left", "lt_add_of_lt_of_nonneg", "le_mul_of_le_of_one_le", "le_of_le_mul_of_le_one_right", "mul_eq_mul_iff_eq_and_eq", "neg_of_add_lt_left", "mul_le_one'", "lt_of_add_lt_add_left", "add_le_of_nonpos_of_le", "one_lt_mul''", "one_le_of_le_mul_right", "add_le_add", "lt_mul_of_lt_of_one_lt", "lt_mul_of_one_lt_of_le", "mul_lt_of_lt_one_of_lt'", "add_le_of_nonpos_left", "mul_lt_mul_left'", "add_lt_of_neg_left", "add_le_of_le_of_nonpos", "add_pos_of_pos_of_nonneg", "mul_le_iff_le_one_right'", "add_lt_add", "le_mul_iff_one_le_right'", "mul_le_of_le_one_of_le", "mul_lt_of_lt_one_right'", "add_lt_of_le_of_neg", "add_lt_add_iff_right", "lt_of_mul_lt_mul_left'", "one_lt_mul_of_le_of_lt'", "nonneg_of_le_add_right", "lt_mul_of_lt_of_one_lt'", "le_add_of_le_add_left", "mul_left_cancel''", "add_lt_of_neg_of_lt'", "mul_lt_of_lt_one_left'", "eq_zero_of_add_nonneg_left", "mul_lt_of_lt_of_lt_one", "le_add_iff_nonneg_left", "add_le_add_iff_right", "add_lt_add_of_lt_of_le", "add_lt_add_of_lt_of_lt", "add_nonneg", "mul_lt_of_lt_of_lt_one'", "mul_lt_of_mul_lt_left", "le_one_of_mul_le_right", "eq_one_of_one_le_mul_right", "add_neg_of_neg_of_nonpos", "lt_mul_of_lt_mul_left", "lt_of_lt_add_of_nonpos_left", "lt_mul_of_le_of_one_lt", "add_le_add_three", "one_lt_of_lt_mul_left", "lt_of_lt_mul_of_le_one_left", "eq_one_of_mul_le_one_left", "lt_of_add_lt_add_right", "add_nonpos", "add_le_of_add_le_left", "nonneg_of_le_add_left", "mul_lt_mul_right'"], "mathlib/src/algebra/order/monoid/with_top.lean": ["zero_hom.with_top_map_apply", "zero_hom.with_bot_map_apply", "add_hom.with_bot_map_apply", "add_hom.with_top_map_apply", "one_hom.with_top_map_apply", "with_top.coe_le_zero", "with_bot.coe_nonneg", "with_top.coe_coe_add_hom", "one_hom.with_bot_map_apply", "with_top.coe_nonneg", "add_monoid_hom.with_bot_map_apply", "with_bot.coe_le_zero", "add_monoid_hom.with_top_map_apply"], "mathlib/src/algebra/order/monoid/basic.lean": ["order_embedding.add_right_apply", "order_embedding.mul_left_apply", "order_embedding.mul_right_apply", "order_embedding.add_left_apply"], "mathlib/src/algebra/order/monoid/nat_cast.lean": ["zero_le_three", "one_le_two", "four_pos", "zero_le_two", "zero_lt_three", "zero_lt_two'", "zero_lt_three'", "two_pos", "lt_one_add", "zero_lt_two", "one_le_two'", "three_pos", "zero_lt_four", "zero_le_four", "lt_add_one", "one_lt_two", "zero_lt_four'"], "mathlib/src/algebra/order/field/basic.lean": ["inv_nonneg_of_nonneg", "order_iso.mul_left₀_apply", "div_le_div_of_mul_sub_mul_div_nonpos", "order_iso.mul_right₀_apply", "mul_sub_mul_div_mul_neg", "div_lt_div_of_mul_sub_mul_div_neg", "order_iso.mul_right₀_symm_apply", "mul_sub_mul_div_mul_nonpos", "inv_pos_of_pos", "order_iso.mul_left₀_symm_apply"], "mathlib/src/algebra/order/group/min_max.lean": ["max_zero_sub_eq_self"], "mathlib/src/algebra/order/group/defs.lean": ["one_lt_inv'", "le_sub_right_of_add_le", "ordered_add_comm_group.add_lt_add_left", "lt_of_neg_lt_neg", "le_sub_left_of_add_le", "lt_inv_mul_of_mul_lt", "nonneg_of_neg_nonpos", "inv_le_one'", "inv_mul_le_of_le_mul", "lt_mul_of_inv_mul_lt_left", "lt_inv_of_lt_inv", "neg_pos", "add_le_of_le_neg_add", "ordered_add_comm_group.le_of_add_le_add_left", "sub_neg_of_lt", "mul_le_of_le_inv_mul", "sub_nonneg_of_le", "neg_pos_of_neg", "le_one_of_one_le_inv", "sub_right_lt_of_lt_add", "le_inv_mul_of_mul_le", "le_add_of_sub_left_le", "inv_lt_of_inv_lt'", "lt_of_sub_pos", "sub_lt_zero", "sub_left_le_of_le_add", "lt_sub_left_of_add_lt", "inv_lt_one_iff_one_lt", "inv_mul_lt_of_lt_mul", "neg_neg_iff_pos", "ordered_comm_group.le_of_mul_le_mul_left", "sub_nonpos_of_le", "mul_lt_of_lt_inv_mul", "sub_le_self", "neg_lt_of_neg_lt", "nonpos_of_neg_nonneg", "sub_pos_of_lt", "one_le_of_inv_le_one", "lt_add_of_sub_left_lt", "add_le_of_le_sub_right", "neg_le_self", "sub_lt_self", "lt_mul_of_inv_mul_lt", "one_le_inv'", "lt_add_of_sub_right_lt", "ordered_comm_group.mul_lt_mul_left'", "inv_lt_one'", "add_comm_group.total_positive_cone.to_positive_cone", "sub_left_lt_of_lt_add", "lt_add_of_neg_add_lt_left", "neg_nonpos", "lt_of_inv_lt_inv", "pos_of_neg_neg", "ordered_comm_group.lt_of_mul_lt_mul_left", "one_lt_of_inv_lt_one", "inv_of_one_lt_inv", "add_le_of_le_sub_left", "neg_nonneg", "le_of_sub_nonneg", "neg_lt_zero", "add_lt_of_lt_sub_right", "add_lt_of_lt_sub_left", "lt_add_of_neg_add_lt", "ordered_add_comm_group.lt_of_add_lt_add_left", "one_lt_inv_of_inv", "neg_of_neg_pos", "lt_neg_add_of_add_lt", "lt_of_sub_neg", "add_lt_of_lt_neg_add", "lt_sub_right_of_add_lt", "neg_lt_self", "le_of_sub_nonpos", "lt_neg_of_lt_neg", "neg_add_lt_of_lt_add", "le_neg_add_of_add_le", "le_of_neg_le_neg"], "mathlib/src/algebra/order/group/order_iso.lean": ["order_iso.add_left_apply", "order_iso.inv_symm_apply", "order_iso.neg_symm_apply", "order_iso.neg_apply", "order_iso.mul_right_to_equiv", "order_iso.add_left_to_equiv", "order_iso.inv_apply", "order_iso.add_right_to_equiv", "order_iso.mul_left_to_equiv", "order_iso.mul_right_apply", "order_iso.mul_left_apply", "neg_le_of_neg_le", "le_inv_of_le_inv", "order_iso.add_right_apply", "le_neg_of_le_neg", "inv_le_of_inv_le'"], "mathlib/src/algebra/order/hom/monoid.lean": ["order_monoid_hom.mk'_to_monoid_hom", "order_add_monoid_hom.mk'_to_add_monoid_hom", "order_monoid_hom.comp_apply"], "mathlib/src/algebra/order/hom/basic.lean": ["map_eq_zero_iff_eq_one", "map_sub_le_add", "map_pos_of_ne_one", "group_seminorm_class", "abs_sub_map_le_div", "ring_seminorm_class", "mul_ring_norm_class", "map_sub_rev", "ring_norm_class", "add_group_norm_class", "add_group_seminorm_class", "abs_sub_map_le_sub", "le_map_add_map_div'", "map_ne_zero_iff_ne_zero", "map_div_rev", "map_pos_of_ne_zero", "map_ne_zero_iff_ne_one", "map_eq_zero_iff_eq_zero", "group_norm_class", "mul_ring_seminorm_class", "map_div_le_add", "le_map_add_map_sub'"], "mathlib/src/algebra/field/basic.lean": ["div_add_one", "of_dual_rat_cast", "one_div_add_one_div", "add_div", "inv_neg", "one_div_neg_eq_neg_one_div", "same_sub_div", "to_lex_rat_cast", "add_div'", "div_neg_self", "neg_inv", "div_sub_div_same", "sub_div", "one_div_mul_add_mul_one_div_eq_one_div_add_one_div", "div_sub_div", "div_neg_eq_neg_div", "neg_div", "div_add_same", "inv_sub_inv", "one_add_div", "one_sub_div", "to_dual_rat_cast", "neg_div'", "neg_div_neg_eq", "add_div_eq_mul_add_div", "div_add'", "div_add_div", "div_sub_same", "div_neg", "inv_sub_inv'", "same_add_div", "div_sub'", "div_sub_one", "one_div_mul_sub_mul_one_div_eq_one_div_add_one_div", "inv_add_inv", "one_div_neg_one_eq_neg_one", "div_add_div_same", "of_lex_rat_cast", "sub_div'", "neg_div_self"], "mathlib/src/algebra/gcd_monoid/basic.lean": ["associates_equiv_of_unique_units_apply", "associates_equiv_of_unique_units_symm_apply"], "mathlib/src/algebra/group_ring_action/basic.lean": ["mul_semiring_action.to_ring_equiv_apply", "mul_semiring_action.to_ring_hom_apply", "mul_semiring_action.to_ring_equiv_symm_apply"], "mathlib/src/algebra/big_operators/pi.lean": ["prod_mk_sum"], "mathlib/src/algebra/big_operators/ring.lean": ["finset.sum_powerset_insert", "finset.sum_powerset"], "mathlib/src/algebra/star/unitary.lean": ["unitary.coe_to_units_apply", "unitary.coe_inv_to_units_apply"], "mathlib/src/algebra/star/basic.lean": ["complex.conj_conj", "is_R_or_C.conj_conj", "star_ring_aut_apply", "star_mul_equiv_apply", "star_mul_aut_apply", "star_ring_equiv_apply", "star_add_equiv_apply"], "mathlib/src/algebra/homology/complex_shape.lean": ["complex_shape.up_rel", "complex_shape.prev_eq'", "complex_shape.symm_symm", "complex_shape.down_rel", "complex_shape.down'_mk", "complex_shape.prev", "complex_shape.down'_rel", "complex_shape.refl", "complex_shape.next", "complex_shape.up", "complex_shape.symm_rel", "complex_shape.next_eq'", "complex_shape.down'", "complex_shape.ext", "complex_shape.up'", "complex_shape.trans", "complex_shape", "complex_shape.refl_rel", "complex_shape.down", "complex_shape.ext_iff", "complex_shape.down_mk", "complex_shape.symm", "complex_shape.up'_rel"], "mathlib/src/algebra/char_zero/lemmas.lean": ["nat.cast_embedding_apply"], "mathlib/src/algebra/group/pi.lean": ["pi.const_mul_hom_apply", "pi.add_hom_apply", "add_monoid_hom.coe_fn_apply", "add_hom.comp_left_apply", "add_monoid_hom.comp_left_apply", "pi.eval_add_monoid_hom_apply", "pi.const_add_monoid_hom_apply", "monoid_hom.coe_fn_apply", "add_hom.coe_fn_apply", "pi.eval_add_hom_apply", "pi.const_add_hom_apply", "monoid_hom.comp_left_apply", "pi.eval_monoid_hom_apply", "mul_hom.single_apply", "pi.add_monoid_hom_apply", "function.extend_by_zero.hom_apply", "pi.monoid_hom_apply", "function.extend_by_one.hom_apply", "mul_hom.coe_fn_apply", "pi.mul_hom_apply", "pi.eval_mul_hom_apply", "pi.const_monoid_hom_apply", "mul_hom.comp_left_apply"], "mathlib/src/algebra/group/defs.lean": ["is_right_cancel_mul", "sub_neg_zero_monoid", "sub_eq_add_neg", "mul_left_inv", "zero_zsmul", "left_cancel_semigroup.ext_iff", "nsmul_eq_smul", "is_left_cancel_add", "npow_eq_pow", "add_comm_semigroup.ext_iff", "mul_assoc", "neg_zero_class", "is_cancel_add", "is_left_cancel_mul", "left_mul", "has_smul.ext", "inv_one_class", "add_group.to_add_monoid", "zero_nsmul", "left_add", "left_cancel_semigroup", "add_left_cancel_semigroup.ext_iff", "add_semigroup.ext_iff", "coe_nat_zsmul", "sub_neg_monoid", "mul_inv_cancel_right", "neg_add_rev", "add_cancel_comm_monoid", "succ_nsmul", "add_comm_semigroup.ext", "mul_right_inv", "div_eq_mul_inv", "zsmul_eq_smul", "add_semigroup.ext", "add_right_neg", "add_semigroup", "mul_right_cancel_iff", "inv_mul_self", "add_cancel_monoid", "left_neg_eq_right_neg", "add_comm_group", "semigroup.ext_iff", "mul_left_inj", "add_left_injective", "group", "add_zero", "mul_left_cancel", "add_monoid", "division_comm_monoid", "neg_add_cancel_left", "right_add", "add_right_cancel_semigroup", "add_left_cancel_semigroup.ext", "npow_rec", "add_neg_cancel_left", "right_mul", "neg_add_self", "comm_semigroup", "left_cancel_monoid", "add_left_cancel", "comm_group", "add_right_cancel_monoid", "inv_eq_of_mul_eq_one_right", "add_right_cancel", "zsmul_rec", "div_inv_monoid", "mul_one_class.ext", "right_cancel_semigroup.ext", "mul_one", "comm_monoid", "mul_left_cancel_iff", "zero_add", "add_comm", "neg_add_cancel_right", "add_left_cancel_iff", "neg_zero", "mul_inv_self", "add_left_cancel_monoid", "has_smul.ext_iff", "subtraction_monoid", "is_cancel_mul", "add_right_cancel_iff", "mul_inv_rev", "is_right_cancel_add", "mul_right_inj", "right_cancel_semigroup.ext_iff", "div_inv_one_monoid", "nsmul_rec", "comm_semigroup.ext", "pow_zero", "add_comm_monoid", "zpow_eq_pow", "add_neg_self", "right_cancel_semigroup", "add_left_cancel_semigroup", "add_neg_cancel_right", "mul_ne_mul_right", "mul_right_injective", "add_group", "inv_inv", "add_right_cancel_semigroup.ext", "inv_mul_cancel_right", "zpow_zero", "mul_inv_cancel_left", "inv_mul_cancel_left", "add_right_inj", "mul_ne_mul_left", "mul_comm", "add_left_inj", "add_assoc", "inv_one", "semigroup.ext", "cancel_monoid", "neg_neg", "semigroup", "add_right_cancel_semigroup.ext_iff", "mul_left_injective", "division_def", "neg_eq_of_add_eq_zero_right", "add_comm_semigroup", "add_ne_add_right", "subtraction_comm_monoid", "left_inv_eq_right_inv", "comm_semigroup.ext_iff", "add_zero_class", "group.to_monoid", "mul_right_cancel", "add_zero_class.ext", "add_ne_add_left", "add_left_neg", "division_monoid", "right_cancel_monoid", "left_cancel_semigroup.ext", "zpow_rec", "mul_one_class", "one_mul", "monoid", "cancel_comm_monoid", "add_right_injective", "pow_succ"], "mathlib/src/algebra/group/units.lean": ["units.eq_mul_inv_iff_mul_eq", "is_add_unit.add_left_cancel", "inv_eq_one_divp", "is_unit.inv_mul_cancel", "add_units.coe_neg_copy", "divp_assoc", "divp_assoc'", "units.mul_inv_eq_one", "is_unit.exists_right_inv", "add_units.neg_unique", "units.inv_unique", "add_units.neg_add_eq_zero", "units.mul_inv_eq_iff_eq_mul", "is_unit.mul_right_injective", "inv_eq_one_divp'", "is_add_unit.add", "is_unit.mul_left_cancel", "is_add_unit.exists_neg", "is_unit.exists_left_inv", "is_add_unit.add_unit_spec", "divp_left_inj", "add_units.add_eq_zero_iff_neg_eq", "is_add_unit.neg_add_cancel", "add_units.mk_of_add_eq_zero", "add_units.add_left_inj", "is_add_unit", "add_units.eq_add_neg_iff_add_eq", "units.inv_mul_eq_one", "is_unit.mul_right_cancel", "is_unit.unit_spec", "one_divp", "is_add_unit.add_right_inj", "units.inv_mul_eq_iff_eq_mul", "divp_mul_cancel", "units.mul_left_inj", "divp", "divp_divp_eq_divp_mul", "add_units.eq_neg_add_iff_add_eq", "is_unit.mul_left_inj", "eq_divp_iff_mul_eq", "units.eq_inv_of_mul_eq_one_left", "is_add_unit.add_left_inj", "add_units.neg_add_eq_iff_eq_add", "is_add_unit.add_right_cancel", "units.mk_of_mul_eq_one", "divp_one", "is_add_unit.add_neg_cancel", "units.coe_copy", "is_unit.mul_right_inj", "divp_eq_divp_iff", "divp_mul_divp", "units.mul_right_inj", "units.coe_inv_copy", "is_unit", "add_units.add_eq_zero_iff_eq_neg", "add_units.eq_neg_of_add_eq_zero_left", "add_units.add_right_inj", "is_add_unit.add_left_injective", "units.inv_eq_of_mul_eq_one_left", "is_add_unit.add_right_injective", "divp_eq_iff_mul_eq", "divp_eq_one_iff_eq", "is_add_unit.exists_neg'", "units.mul_eq_one_iff_eq_inv", "add_units.add_neg_eq_zero", "add_units.eq_neg_of_add_eq_zero_right", "add_units.neg_eq_of_add_eq_zero_left", "add_units.add_neg_eq_iff_eq_add", "units.eq_inv_mul_iff_mul_eq", "divp_mul_eq_mul_divp", "divp_self", "units.inv_eq_of_mul_eq_one_right", "units.mul_eq_one_iff_inv_eq", "divp_inv", "mul_divp_cancel", "is_unit.mul_left_injective", "is_unit.mul", "add_units.coe_neg", "add_units.neg_eq_of_add_eq_zero_right", "is_unit.mul_inv_cancel", "add_units.coe_copy", "units.eq_inv_of_mul_eq_one_right"], "mathlib/src/algebra/group/prod.lean": ["sub_add_monoid_hom_apply", "div_monoid_hom_apply", "add_add_monoid_hom_apply", "mul_monoid_hom_apply", "add_units.embed_product_apply", "mul_monoid_with_zero_hom_apply", "mul_mul_hom_apply", "div_monoid_with_zero_hom_apply", "add_add_hom_apply", "units.embed_product_apply"], "mathlib/src/algebra/group/order_synonym.lean": ["to_lex_smul'", "of_lex_smul'"], "mathlib/src/algebra/group/basic.lean": ["div_eq_iff_eq_mul'", "comp_assoc_right", "sub_eq_add_zero_sub", "mul_div_assoc", "eq_div_iff_mul_eq''", "inv_div_inv", "div_self'", "eq_sub_iff_add_eq'", "one_div_div", "inv_surjective", "sub_add_cancel", "sub_eq_zero_of_eq", "sub_add_sub_cancel'", "sub_add_add_cancel", "sub_right_comm", "eq_zero_sub_of_add_eq_zero_left", "sub_add_sub_cancel", "neg_add'", "neg_sub_left", "mul_div_cancel''", "sub_add_eq_sub_sub", "div_mul_eq_div_div", "div_one", "eq_add_of_sub_eq", "mul_eq_of_eq_inv_mul", "mul_left_surjective", "inv_mul_eq_one", "eq_iff_eq_of_div_eq_div", "sub_sub_cancel", "neg_sub'", "eq_zero_iff_eq_zero_of_add_eq_zero", "eq_sub_of_add_eq'", "eq_mul_of_div_eq'", "sub_left_injective", "zero_sub_sub", "neg_sub", "mul_div_cancel'''", "div_mul_div_comm", "eq_of_div_eq_one", "neg_add", "mul_right_comm", "one_eq_inv", "neg_involutive", "zero_sub_zero", "mul_right_surjective", "add_neg_eq_zero", "eq_of_sub_eq_zero", "inv_div'", "sub_add_cancel'", "sub_eq_sub_add_sub", "add_zero_sub", "add_eq_of_eq_sub", "mul_eq_of_eq_div", "one_div_mul_one_div_rev", "sub_eq_iff_eq_add", "eq_mul_of_mul_inv_eq", "one_div", "div_eq_mul_one_div", "inv_mul_eq_iff_eq_mul", "mul_mul_div_cancel", "div_mul", "bit0_sub", "comp_mul_left", "neg_eq_of_add_eq_zero_left", "add_sub_right_comm", "mul_comm_div", "eq_inv_iff_eq_inv", "div_eq_one", "div_div", "mul_div_right_comm", "ite_mul_one", "div_eq_self", "mul_one_eq_id", "sub_eq_sub_iff_add_eq_add", "add_sub_add_left_eq_sub", "comp_add_left", "mul_rotate'", "add_sub_sub_cancel", "comp_mul_right", "mul_mul_inv_cancel'_right", "mul_mul_mul_comm", "sub_right_injective", "div_eq_div_mul_div", "sub_sub_sub_eq", "eq_inv_mul_iff_mul_eq", "div_div_div_comm", "mul_inv_eq_one", "mul_inv", "one_div_one", "eq_neg_of_add_eq_zero_right", "zero_sub_zero_sub", "inv_injective", "eq_div_iff_mul_eq'", "eq_inv_iff_mul_eq_one", "div_eq_div_iff_div_eq_div", "zero_sub", "eq_add_of_neg_add_eq", "neg_eq_zero", "div_inv_eq_mul", "neg_eq_iff_add_eq_zero", "sub_eq_zero", "comp_add_right", "neg_add_eq_iff_eq_add", "add_right_eq_self", "mul_eq_of_eq_mul_inv", "div_eq_of_eq_mul'", "eq_iff_eq_of_sub_eq_sub", "sub_sub_sub_cancel_left", "eq_neg_iff_add_eq_zero", "bit0_neg", "one_div_mul_one_div", "div_right_comm", "div_eq_inv_self", "sub_sub_cancel_left", "one_div_one_div", "sub_add_eq_sub_sub_swap", "add_neg_eq_of_eq_add", "inv_unique", "div_ne_one", "mul_right_eq_self", "eq_one_iff_eq_one_of_mul_eq_one", "mul_inv_eq_of_eq_mul", "mul_div_mul_left_eq_div", "add_eq_zero_iff_neg_eq", "neg_ne_zero", "div_div_self'", "add_rotate", "div_eq_iff_eq_mul", "eq_neg_of_add_eq_zero_left", "inv_eq_one_div", "add_sub_add_comm", "eq_inv_of_mul_eq_one_left", "sub_eq_of_eq_add", "div_mul_div_cancel''", "mul_left_comm", "mul_eq_of_eq_div'", "add_left_surjective", "sub_zero", "exists_npow_eq_one_of_zpow_eq_one", "add_eq_zero_iff_eq_neg", "mul_div_cancel'_right", "div_mul_cancel''", "inv_eq_iff_mul_eq_one", "inv_mul'", "add_right_surjective", "zero_eq_neg", "sub_right_inj", "exists_nsmul_eq_zero_of_zsmul_eq_zero", "div_mul_eq_mul_div", "ite_one_mul", "neg_sub_neg", "eq_one_div_of_mul_eq_one_left", "mul_inv_eq_iff_eq_mul", "eq_mul_of_div_eq", "neg_neg_sub_neg", "mul_div_mul_comm", "zero_sub_add_zero_sub", "sub_add_eq_add_sub", "eq_neg_iff_eq_neg", "mul_rotate", "eq_zero_sub_of_add_eq_zero_right", "add_neg_eq_iff_eq_add", "one_mul_eq_id", "mul_div_mul_right_eq_div", "inv_inj", "eq_add_of_sub_eq'", "mul_div_div_cancel", "mul_div_left_comm", "div_mul_div_cancel'", "self_eq_mul_left", "zero_sub_add_zero_sub_rev", "sub_eq_neg_self", "add_sub_left_comm", "div_right_inj", "ite_add_zero", "eq_inv_of_mul_eq_one_right", "comp_assoc_left", "inv_comp_inv", "bit1_sub", "sub_add_sub_comm", "eq_inv_mul_of_mul_eq", "sub_sub_sub_comm", "sub_left_inj", "add_eq_of_eq_add_neg", "div_left_injective", "sub_ne_zero_of_ne", "add_sub_cancel'_right", "eq_inv_of_eq_inv", "self_eq_mul_right", "eq_mul_inv_of_mul_eq", "div_div_div_eq", "add_sub_assoc'", "eq_of_one_div_eq_one_div", "eq_div_of_mul_eq''", "neg_add_eq_zero", "eq_one_div_of_mul_eq_one_right", "div_mul_mul_cancel", "mul_div_assoc'", "add_eq_of_eq_neg_add", "add_zero_eq_id", "neg_injective", "self_eq_add_right", "neg_eq_zero_sub", "div_div_eq_mul_div", "mul_div", "sub_eq_sub_iff_sub_eq_sub", "inv_inv_div_inv", "mul_eq_one_iff_eq_inv", "neg_unique", "div_mul_cancel'", "inv_mul_eq_div", "inv_div_left", "neg_surjective", "div_mul_eq_div_mul_one_div", "div_eq_div_iff_mul_eq_mul", "neg_add_eq_of_eq_add", "sub_sub_self", "sub_sub", "eq_sub_of_add_eq", "neg_inj", "add_add_neg_cancel'_right", "div_eq_one_of_eq", "add_sub_cancel'", "eq_neg_add_iff_add_eq", "eq_div_of_mul_eq'", "neg_comp_neg", "sub_neg_eq_add", "eq_neg_add_of_add_eq", "zero_add_eq_id", "sub_sub_sub_cancel_right", "add_right_comm", "sub_eq_of_eq_add'", "inv_ne_one", "mul_one_div", "inv_div", "div_mul_eq_div_div_swap", "eq_neg_of_eq_neg", "self_eq_add_left", "eq_add_of_add_neg_eq", "sub_add_comm", "neg_eq_iff_neg_eq", "add_rotate'", "sub_sub_eq_add_sub", "eq_sub_iff_add_eq", "add_add_sub_cancel", "sub_self", "inv_eq_of_mul_eq_one_left", "add_left_comm", "neg_add_eq_sub", "ite_zero_add", "mul_eq_one_iff_inv_eq", "sub_eq_self", "add_sub_assoc", "add_add_add_comm", "inv_eq_iff_inv_eq", "sub_add", "inv_eq_one", "div_div_div_cancel_left", "sub_ne_zero", "sub_eq_neg_add", "add_left_eq_self", "sub_add_eq_sub_add_zero_sub", "div_eq_inv_mul", "div_right_injective", "add_eq_of_eq_sub'", "add_comm_sub", "eq_add_neg_iff_add_eq", "inv_involutive", "div_div_cancel", "div_div_cancel_left", "eq_add_neg_of_add_eq", "eq_mul_of_inv_mul_eq", "div_left_inj", "eq_of_zero_sub_eq_zero_sub", "div_ne_one_of_ne", "div_mul_comm", "add_sub", "div_eq_of_eq_mul''", "add_sub_add_right_eq_sub", "sub_eq_iff_eq_add'", "inv_mul_eq_of_eq_mul", "mul_left_eq_self", "add_sub_cancel", "div_div_div_cancel_right'", "eq_mul_inv_iff_mul_eq"], "mathlib/src/algebra/group/ulift.lean": ["add_equiv.ulift"], "mathlib/src/algebra/group/opposite.lean": ["mul_equiv.inv'_symm_apply", "mul_equiv.inv'_apply", "add_equiv.op_symm_apply_apply", "mul_hom.to_opposite_apply", "monoid_hom.to_opposite_apply", "mul_opposite.op_add_equiv_symm_apply", "add_equiv.op_apply_apply", "add_monoid_hom.op_symm_apply_apply", "mul_equiv.op_symm_apply_apply", "mul_hom.from_opposite_apply", "monoid_hom.op_apply_apply", "add_equiv.mul_op_apply", "add_monoid_hom.mul_op_apply_apply", "add_opposite.op_mul_equiv_apply", "add_hom.to_opposite_apply", "mul_equiv.op_apply_apply", "add_opposite.op_mul_equiv_symm_apply", "monoid_hom.from_opposite_apply", "add_monoid_hom.from_opposite_apply", "mul_opposite.op_add_equiv_apply", "mul_equiv.op_symm_apply_symm_apply", "add_hom.op_apply_apply", "add_hom.mul_op_apply_apply", "add_monoid_hom.to_opposite_apply", "add_equiv.neg'_symm_apply", "mul_equiv.op_apply_symm_apply", "add_monoid_hom.op_apply_apply", "add_equiv.op_symm_apply_symm_apply", "monoid_hom.op_symm_apply_apply", "add_hom.mul_op_symm_apply_apply", "add_equiv.mul_op_symm_apply", "add_equiv.op_apply_symm_apply", "mul_hom.op_symm_apply_apply", "add_hom.op_symm_apply_apply", "mul_hom.op_apply_apply", "add_hom.from_opposite_apply", "add_monoid_hom.mul_op_symm_apply_apply", "add_equiv.neg'_apply"], "mathlib/src/algebra/group/type_tags.lean": ["add_monoid_hom.to_multiplicative'_symm_apply_apply", "monoid_hom.to_additive_apply_apply", "monoid_hom.to_additive_symm_apply_apply", "add_monoid_hom.to_multiplicative_apply_apply", "monoid_hom.to_additive''_symm_apply_apply", "monoid_hom.to_additive'_apply_apply", "monoid_hom.to_additive''_apply_apply", "add_monoid_hom.to_multiplicative''_apply_apply", "add_monoid_hom.to_multiplicative_symm_apply_apply", "monoid_hom.to_additive'_symm_apply_apply", "add_monoid_hom.to_multiplicative'_apply_apply", "add_monoid_hom.to_multiplicative''_symm_apply_apply"], "mathlib/src/algebra/group/inj_surj.lean": ["function.injective.add_comm_monoid_with_one", "function.surjective.add_comm_group_with_one", "function.surjective.add_comm_monoid_with_one", "function.injective.cancel_monoid", "function.injective.add_comm_group_with_one"], "mathlib/src/algebra/group/commute.lean": ["commute.pow_self"], "mathlib/src/algebra/group/with_one/basic.lean": ["with_zero.coe_add_hom_apply", "with_one.coe_mul_hom_apply"], "mathlib/src/algebra/hom/embedding.lean": ["mul_left_embedding_apply", "add_right_embedding_apply", "mul_left_embedding_eq_mul_right_embedding", "add_left_embedding_eq_add_right_embedding", "mul_right_embedding_apply", "add_left_embedding_apply"], "mathlib/src/algebra/hom/units.lean": ["is_add_unit.coe_add_unit'", "is_add_unit.coe_neg_add_unit'", "is_unit.coe_inv_unit'", "is_unit.coe_unit'"], "mathlib/src/algebra/hom/group_instances.lean": ["add_monoid_hom.flip_hom_apply", "add_monoid_hom.comp_hom_apply_apply", "add_monoid.End.mul_left_apply_apply", "add_monoid_hom.eval_apply_apply", "monoid_hom.comp_hom_apply_apply", "monoid_hom.flip_hom_apply", "monoid_hom.comp_hom'_apply_apply", "add_monoid.End.mul_right_apply_apply", "monoid_hom.eval_apply_apply", "add_monoid_hom.comp_hom'_apply_apply"], "mathlib/src/algebra/hom/group_action.lean": ["mul_semiring_action_hom.to_ring_hom", "distrib_mul_action_hom.to_mul_action_hom", "mul_action_hom.inverse_to_fun", "distrib_mul_action_hom.inverse_to_fun", "distrib_mul_action_hom.to_add_monoid_hom", "mul_semiring_action_hom.to_distrib_mul_action_hom"], "mathlib/src/algebra/hom/freiman.lean": ["freiman_hom.id_apply", "add_freiman_hom.id_comp", "add_freiman_hom.id_apply"], "mathlib/src/algebra/hom/group.lean": ["monoid_hom.coe_eq_to_mul_hom", "mul_hom.id_apply", "monoid_with_zero_hom.to_monoid_hom", "monoid_with_zero_hom.coe_eq_to_zero_hom", "mul_hom.to_fun_eq_coe", "add_hom.coe_copy_eq", "monoid_with_zero_hom.copy_eq", "monoid_with_zero_hom.to_zero_hom", "add_hom.to_fun_eq_coe", "add_monoid_hom.coe_eq_to_zero_hom", "add_hom.coe_copy", "zero_hom.to_fun_eq_coe", "monoid_hom.coe_copy", "monoid_hom.copy_eq", "zero_hom.coe_copy", "one_hom.id_apply", "monoid_hom.to_fun_eq_coe", "add_monoid_hom.coe_eq_to_add_hom", "one_hom.coe_copy_eq", "add_monoid_hom.to_fun_eq_coe", "mul_hom.coe_copy_eq", "add_monoid_hom.mk'_apply", "zero_hom.coe_copy_eq", "add_monoid_hom.to_zero_hom", "add_monoid_hom.id_apply", "add_hom.id_apply", "monoid_hom.mk'_apply", "one_hom.to_fun_eq_coe", "add_monoid_hom.to_add_hom", "add_monoid_hom.copy_eq", "monoid_with_zero_hom.id_apply", "monoid_with_zero_hom.coe_copy", "mul_hom.coe_copy", "map_nsmul.aux", "monoid_hom.id_apply", "one_hom.coe_copy", "zero_hom.id_apply", "monoid_with_zero_hom.to_fun_eq_coe", "monoid_hom.to_one_hom", "monoid_hom.coe_eq_to_one_hom", "monoid_hom.to_mul_hom", "map_zsmul.aux", "add_monoid_hom.coe_copy", "monoid_with_zero_hom.coe_eq_to_monoid_hom"], "mathlib/src/algebra/hom/ring.lean": ["ring_hom.to_monoid_with_zero_hom", "ring_hom.map_bit1", "map_bit1", "ring_hom.to_monoid_hom", "non_unital_ring_hom.to_add_monoid_hom", "ring_hom.to_add_monoid_hom", "ring_hom.to_non_unital_ring_hom", "non_unital_ring_hom.to_mul_hom", "ring_hom.map_bit0"], "mathlib/src/algebra/hom/centroid.lean": ["centroid_hom.to_fun_eq_coe", "centroid_hom.to_add_monoid_hom"], "mathlib/src/algebra/hom/iterate.lean": ["add_monoid_hom.iterate_map_nsmul", "nsmul_iterate"], "mathlib/src/algebra/hom/equiv/basic.lean": ["add_equiv.to_equiv", "add_equiv.to_add_hom", "monoid_hom.inverse_apply", "mul_equiv.arrow_congr_apply", "add_monoid_hom.inverse_apply", "add_equiv.Pi_congr_right_apply", "mul_equiv.to_equiv", "mul_equiv.to_mul_hom", "mul_equiv.Pi_congr_right_apply", "add_equiv.arrow_congr_apply"], "mathlib/src/algebra/hom/equiv/units/basic.lean": ["units.mul_right_apply", "equiv.sub_left_apply", "equiv.div_right_apply", "equiv.div_left_symm_apply", "equiv.sub_right_apply", "equiv.div_right_symm_apply", "equiv.sub_left_symm_apply", "equiv.sub_right_symm_apply", "add_units.add_right_apply", "equiv.div_left_apply", "units.mul_left_apply", "add_units.add_left_apply"], "mathlib/src/algebra/hom/equiv/units/group_with_zero.lean": ["equiv.mul_left₀_apply", "equiv.mul_right₀_symm_apply", "equiv.mul_left₀_symm_apply", "equiv.mul_right₀_apply"], "mathlib/src/algebra/divisibility/units.lean": ["is_unit.mul_left_dvd", "is_unit.dvd_mul_right", "units.coe_dvd", "is_unit.dvd", "is_unit.mul_right_dvd", "units.dvd_mul_right", "is_unit.dvd_mul_left"], "mathlib/src/algebra/divisibility/basic.lean": ["has_dvd.dvd.trans", "dvd_of_mul_right_eq", "dvd_of_mul_left_eq", "has_dvd.dvd.mul_left", "has_dvd.dvd.mul_right"], "mathlib/src/algebra/group_with_zero/defs.lean": ["is_left_cancel_mul_zero.to_is_cancel_mul_zero", "mul_ne_zero_iff", "mul_eq_zero_comm", "cancel_monoid_with_zero", "mul_self_eq_zero", "no_zero_divisors", "monoid_with_zero", "zero_ne_mul_self", "mul_left_cancel₀", "cancel_comm_monoid_with_zero", "zero_mul", "mul_inv_cancel", "is_right_cancel_mul_zero", "mul_eq_zero_of_left", "is_left_cancel_mul_zero", "mul_right_injective₀", "pullback_nonzero", "mul_eq_zero_of_right", "group_with_zero", "mul_eq_zero", "mul_zero_class", "comm_monoid_with_zero", "comm_group_with_zero", "mul_ne_zero_comm", "is_cancel_mul_zero", "mul_left_injective₀", "inv_zero", "mul_zero", "is_right_cancel_mul_zero.to_is_left_cancel_mul_zero", "zero_eq_mul_self", "semigroup_with_zero", "mul_zero_one_class", "is_left_cancel_mul_zero.to_is_right_cancel_mul_zero", "mul_self_ne_zero", "is_right_cancel_mul_zero.to_is_cancel_mul_zero", "zero_eq_mul", "mul_right_cancel₀"], "mathlib/src/algebra/group_with_zero/basic.lean": ["left_ne_zero_of_mul", "eq_of_zero_eq_one", "inv_eq_zero", "div_self_mul_self'", "mul_left_eq_self₀", "mul_eq_zero_of_ne_zero_imp_eq_zero", "mul_self_div_self", "subsingleton_iff_zero_eq_one", "inv_mul_mul_self", "eq_zero_of_mul_eq_self_left", "mul_ne_zero", "one_div_ne_zero", "mul_inv_cancel_left₀", "inv_ne_zero", "group_with_zero.mul_right_injective", "eq_zero_of_mul_eq_self_right", "mul_zero_eq_const", "div_self_mul_self", "mul_self_mul_inv", "zero_div", "inv_mul_cancel", "mul_right_inj'", "mul_eq_mul_left_iff", "eq_zero_of_mul_self_eq_zero", "mul_eq_mul_right_iff", "div_mul_eq_mul_div₀", "zero_ne_one_or_forall_eq_0", "right_ne_zero_of_mul", "zero_eq_inv", "mul_right_surjective₀", "div_div_self", "div_zero", "mul_right_eq_self₀", "inv_mul_cancel_right₀", "right_ne_zero_of_mul_eq_one", "ne_zero_of_one_div_ne_zero", "mul_left_inj'", "group_with_zero.mul_left_injective", "mul_inv_cancel_right₀", "zero_mul_eq_const", "ne_zero_and_ne_zero_of_mul", "eq_zero_of_one_div_eq_zero", "subsingleton_of_zero_eq_one", "mul_inv_mul_self", "inv_mul_cancel_left₀", "eq_zero_of_zero_eq_one", "left_ne_zero_of_mul_eq_one", "mul_left_surjective₀"], "mathlib/src/combinatorics/quiver/subquiver.lean": ["quiver.total", "quiver.total.ext_iff", "quiver.labelling", "quiver.total.ext", "quiver.wide_subquiver_equiv_set_total", "wide_subquiver"], "mathlib/src/combinatorics/quiver/connected_component.lean": ["quiver.weakly_connected_component", "quiver.wide_subquiver_symmetrify", "quiver.weakly_connected_component.mk", "quiver.weakly_connected_component.eq", "quiver.zigzag_setoid"], "mathlib/src/combinatorics/quiver/single_obj.lean": ["quiver.single_obj.to_prefunctor_apply_map", "quiver.single_obj.to_prefunctor_apply_obj", "quiver.single_obj.to_hom_apply", "quiver.single_obj.to_hom_symm_apply", "quiver.single_obj.to_prefunctor_symm_apply"], "mathlib/src/combinatorics/quiver/symmetric.lean": ["quiver.symmetrify.lift_spec", "quiver.symmetrify.of", "quiver.has_involutive_reverse", "quiver.symmetrify.of_obj", "prefunctor.symmetrify_map", "quiver.symmetrify.lift", "quiver.path.reverse", "prefunctor.symmetrify_obj", "prefunctor.symmetrify", "quiver.has_reverse", "quiver.symmetrify.lift_reverse", "quiver.symmetrify", "quiver.reverse", "quiver.path.reverse_reverse", "quiver.symmetrify.of_map", "quiver.path.reverse_comp"], "mathlib/src/combinatorics/quiver/basic.lean": ["prefunctor.id_map", "prefunctor.comp_map", "prefunctor.id_obj", "prefunctor.comp_obj"], "mathlib/src/combinatorics/quiver/path.lean": ["quiver.path.nil_ne_cons", "quiver.path.comp_nil", "quiver.path.comp_inj'", "quiver.path.comp_cons", "quiver.hom.to_path", "quiver.path.to_list", "quiver.path.comp_inj_left", "quiver.path.nil_comp", "quiver.path.cons_ne_nil", "quiver.path.heq_of_cons_eq_cons", "quiver.path.eq_of_length_zero", "quiver.path.comp_injective_right", "quiver.path.length_comp", "quiver.path.length_nil", "quiver.path.obj_eq_of_cons_eq_cons", "quiver.path", "quiver.path.length_cons", "quiver.path.comp_inj", "quiver.path.comp", "quiver.path.comp_assoc", "quiver.path.comp_inj_right", "quiver.path.comp_injective_left", "quiver.path.length", "quiver.path.hom_heq_of_cons_eq_cons"], "mathlib/src/ring_theory/ring_invo.lean": ["ring_invo.to_ring_equiv"]}
